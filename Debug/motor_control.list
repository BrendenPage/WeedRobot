
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fbc  08005fbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc4  08005fc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc4  08005fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000021c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f115  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e44  00000000  00000000  0002f151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  00031d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022379  00000000  00000000  000329e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4d3  00000000  00000000  00054d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7917  00000000  00000000  0006422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bb43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a28  00000000  00000000  0013bb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f84 	.word	0x08005f84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005f84 	.word	0x08005f84

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	4b5f      	ldr	r3, [pc, #380]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000b42:	881a      	ldrh	r2, [r3, #0]

  memcpy(dma_tx_buffer, dma_rx_buffer, BUFFER_SIZE);
 8000b44:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000b46:	801a      	strh	r2, [r3, #0]
//  memset(dma_rx_buffer, 0, BUFFER_SIZE);
  if (global_status == 1)
 8000b48:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	f040 80b2 	bne.w	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x17e>
  {
	  //Check for Stepper motor command
	  if(dma_tx_buffer[0] == 'R')
 8000b52:	4b5c      	ldr	r3, [pc, #368]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b52      	cmp	r3, #82	; 0x52
 8000b58:	d10d      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x3e>
	  {
		  direction = 1;
 8000b5a:	4b5c      	ldr	r3, [pc, #368]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
		  degree = 4.0;
 8000b60:	4b5b      	ldr	r3, [pc, #364]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000b62:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000b66:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 8000b68:	4b5a      	ldr	r3, [pc, #360]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000b6e:	4b5a      	ldr	r3, [pc, #360]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	801a      	strh	r2, [r3, #0]
 8000b74:	e06b      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
	  }
	  else if(dma_tx_buffer[0] == 'r')
 8000b76:	4b53      	ldr	r3, [pc, #332]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b72      	cmp	r3, #114	; 0x72
 8000b7c:	d10d      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x62>
	  {
		  direction = 1;
 8000b7e:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		  degree = 2.0;
 8000b84:	4b52      	ldr	r3, [pc, #328]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8a:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 8000b8c:	4b51      	ldr	r3, [pc, #324]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000b92:	4b51      	ldr	r3, [pc, #324]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	801a      	strh	r2, [r3, #0]
 8000b98:	e059      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
	  }
	  else if(dma_tx_buffer[0] == 'L')
 8000b9a:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b4c      	cmp	r3, #76	; 0x4c
 8000ba0:	d10d      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x86>
	  {
		  direction = 0;
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
		  degree = 4.0;
 8000ba8:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000baa:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000bae:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 8000bb0:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000bb6:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	801a      	strh	r2, [r3, #0]
 8000bbc:	e047      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
	  }
	  else if(dma_tx_buffer[0] == 'l')
 8000bbe:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b6c      	cmp	r3, #108	; 0x6c
 8000bc4:	d10d      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0xaa>
	  {
		  direction = 0;
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
		  degree = 2.0;
 8000bcc:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd2:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	801a      	strh	r2, [r3, #0]
 8000be0:	e035      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
	  }
	  else if (dma_tx_buffer[0] == 'H')
 8000be2:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b48      	cmp	r3, #72	; 0x48
 8000be8:	d114      	bne.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0xdc>
	  {
		  direction = 2;
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	701a      	strb	r2, [r3, #0]
		  degree = 0.0;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000bf2:	f04f 0200 	mov.w	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
		  reset_counter = 0;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	801a      	strh	r2, [r3, #0]
		  if(spray_counter_1 <= CAMERA_HALT)
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d823      	bhi.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
		  {
			  spray_counter_1++;
 8000c06:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000c10:	801a      	strh	r2, [r3, #0]
 8000c12:	e01c      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
		  }
	  }
	  else if (dma_tx_buffer[0] == 'M')
 8000c14:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b4d      	cmp	r3, #77	; 0x4d
 8000c1a:	d111      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>
	  {
		  direction = 2;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	701a      	strb	r2, [r3, #0]
		  degree = 0.0;
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
		  if (reset_counter <= RESET_COUNT)
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	2b64      	cmp	r3, #100	; 0x64
 8000c30:	d80d      	bhi.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
		  {
			  reset_counter++;
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000c3c:	801a      	strh	r2, [r3, #0]
 8000c3e:	e006      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x116>
		  }
	  }
	  else
	  {
		  direction = 2;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000c42:	2202      	movs	r2, #2
 8000c44:	701a      	strb	r2, [r3, #0]
		  degree = 0.0;
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
	  }


	  if(dma_tx_buffer[1] == 'F')
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	2b46      	cmp	r3, #70	; 0x46
 8000c54:	d109      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x132>
	  {
		  motor_state_selector(MOTOR_F);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fc94 	bl	8001584 <motor_state_selector>
		  spray_counter_2 = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	801a      	strh	r2, [r3, #0]
		  motor_state_selector(MOTOR_HALT);
	  }

  }

}
 8000c68:	e025      	b.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x17e>
	  else if(dma_tx_buffer[1] == 'S')
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b53      	cmp	r3, #83	; 0x53
 8000c70:	d109      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x14e>
		  motor_state_selector(MOTOR_FS);
 8000c72:	2002      	movs	r0, #2
 8000c74:	f000 fc86 	bl	8001584 <motor_state_selector>
		  spray_counter_2 = 0;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	801a      	strh	r2, [r3, #0]
}
 8000c84:	e017      	b.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x17e>
	  else if(dma_tx_buffer[1] == 'H')
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	2b48      	cmp	r3, #72	; 0x48
 8000c8c:	d110      	bne.n	8000cb0 <HAL_TIM_PeriodElapsedCallback+0x178>
		  motor_state_selector(MOTOR_HALT);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 fc78 	bl	8001584 <motor_state_selector>
		  reset_counter = 0;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
		  if(spray_counter_2 <= CAMERA_HALT)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d809      	bhi.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x17e>
			  spray_counter_2++;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000cac:	801a      	strh	r2, [r3, #0]
}
 8000cae:	e002      	b.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x17e>
		  motor_state_selector(MOTOR_HALT);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fc67 	bl	8001584 <motor_state_selector>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000020c 	.word	0x2000020c
 8000cc4:	20000208 	.word	0x20000208
 8000cc8:	2000020e 	.word	0x2000020e
 8000ccc:	2000020f 	.word	0x2000020f
 8000cd0:	20000210 	.word	0x20000210
 8000cd4:	20000214 	.word	0x20000214
 8000cd8:	2000021a 	.word	0x2000021a
 8000cdc:	20000216 	.word	0x20000216

08000ce0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
//		  // We did not detect the object, halt and wait for further info
//		  motor_state_selector(MOTOR_HALT);
//	  }
//
//  }
  HAL_UART_Receive_DMA(&huart2, dma_rx_buffer, 2);
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4904      	ldr	r1, [pc, #16]	; (8000cfc <HAL_UART_RxCpltCallback+0x1c>)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <HAL_UART_RxCpltCallback+0x20>)
 8000cee:	f004 f868 	bl	8004dc2 <HAL_UART_Receive_DMA>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000020c 	.word	0x2000020c
 8000d00:	20000100 	.word	0x20000100

08000d04 <DMA_Message_Init>:

void DMA_Message_Init(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i < BUFFER_SIZE; i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e00a      	b.n	8000d26 <DMA_Message_Init+0x22>
	{
		dma_rx_buffer[i] = 'M';
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <DMA_Message_Init+0x38>)
 8000d14:	214d      	movs	r1, #77	; 0x4d
 8000d16:	54d1      	strb	r1, [r2, r3]
		dma_tx_buffer[i] = 'M';
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <DMA_Message_Init+0x3c>)
 8000d1c:	214d      	movs	r1, #77	; 0x4d
 8000d1e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < BUFFER_SIZE; i++)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	3301      	adds	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d9f1      	bls.n	8000d10 <DMA_Message_Init+0xc>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000020c 	.word	0x2000020c
 8000d40:	20000208 	.word	0x20000208

08000d44 <Counter_Init>:

void Counter_Init(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	spray_counter_1 = 0;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <Counter_Init+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	801a      	strh	r2, [r3, #0]
	spray_counter_2 = 0;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <Counter_Init+0x44>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	801a      	strh	r2, [r3, #0]
	spray_time = 0;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <Counter_Init+0x48>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	801a      	strh	r2, [r3, #0]
	reset_counter = 0;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <Counter_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	801a      	strh	r2, [r3, #0]
	ignore_counter = 0;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <Counter_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	801a      	strh	r2, [r3, #0]
	turn_counter = 0;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <Counter_Init+0x54>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
	direction = 2;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <Counter_Init+0x58>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	701a      	strb	r2, [r3, #0]
	degree = 0.0;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <Counter_Init+0x5c>)
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	20000214 	.word	0x20000214
 8000d88:	20000216 	.word	0x20000216
 8000d8c:	20000218 	.word	0x20000218
 8000d90:	2000021a 	.word	0x2000021a
 8000d94:	2000021c 	.word	0x2000021c
 8000d98:	20000220 	.word	0x20000220
 8000d9c:	2000020f 	.word	0x2000020f
 8000da0:	20000210 	.word	0x20000210

08000da4 <Global_Status_Init>:

void Global_Status_Init(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
	global_status = 0;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <Global_Status_Init+0x14>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	2000020e 	.word	0x2000020e

08000dbc <stepper_motor_reset>:

void stepper_motor_reset(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

	if(turn_counter < 0)
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <stepper_motor_reset+0x94>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da18      	bge.n	8000dfa <stepper_motor_reset+0x3e>
	{
		direction = 0;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <stepper_motor_reset+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
		degree = (float)(turn_counter * 2);
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <stepper_motor_reset+0x94>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <stepper_motor_reset+0x9c>)
 8000dde:	edc3 7a00 	vstr	s15, [r3]
		stepper_step_angle(degree, direction);
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <stepper_motor_reset+0x9c>)
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <stepper_motor_reset+0x98>)
 8000dea:	f993 3000 	ldrsb.w	r3, [r3]
 8000dee:	4618      	mov	r0, r3
 8000df0:	eeb0 0a67 	vmov.f32	s0, s15
 8000df4:	f000 fc52 	bl	800169c <stepper_step_angle>
 8000df8:	e024      	b.n	8000e44 <stepper_motor_reset+0x88>
	}
	else if (turn_counter > 0)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <stepper_motor_reset+0x94>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dd20      	ble.n	8000e44 <stepper_motor_reset+0x88>
	{
		direction = 1;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <stepper_motor_reset+0x98>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
		degree = (float)(turn_counter * 2.5);
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <stepper_motor_reset+0x94>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fc57 	bl	80006c0 <__aeabi_i2d>
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <stepper_motor_reset+0xa0>)
 8000e18:	f7ff f9d6 	bl	80001c8 <__aeabi_dmul>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fcb6 	bl	8000794 <__aeabi_d2f>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <stepper_motor_reset+0x9c>)
 8000e2c:	6013      	str	r3, [r2, #0]
		stepper_step_angle(degree, direction);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <stepper_motor_reset+0x9c>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <stepper_motor_reset+0x98>)
 8000e36:	f993 3000 	ldrsb.w	r3, [r3]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e40:	f000 fc2c 	bl	800169c <stepper_step_angle>
	}

//	degree = (float)(turn_counter * 5);
//	stepper_step_angle(degree, direction);
	turn_counter = 0;
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <stepper_motor_reset+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
//	turn_amount = 0;
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000220 	.word	0x20000220
 8000e54:	2000020f 	.word	0x2000020f
 8000e58:	20000210 	.word	0x20000210
 8000e5c:	40040000 	.word	0x40040000

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f000 ff5a 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e68:	f000 f922 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 fae4 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e70:	f000 faba 	bl	80013e8 <MX_DMA_Init>
  MX_ADC3_Init();
 8000e74:	f000 f984 	bl	8001180 <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8000e78:	f000 fa8c 	bl	8001394 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000e7c:	f000 fa54 	bl	8001328 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000e80:	f000 f9d0 	bl	8001224 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, &VR, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	4979      	ldr	r1, [pc, #484]	; (800106c <main+0x20c>)
 8000e88:	4879      	ldr	r0, [pc, #484]	; (8001070 <main+0x210>)
 8000e8a:	f001 f821 	bl	8001ed0 <HAL_ADC_Start_DMA>
  DMA_Message_Init();
 8000e8e:	f7ff ff39 	bl	8000d04 <DMA_Message_Init>
  HAL_UART_Receive_DMA(&huart2, dma_rx_buffer, 2);
 8000e92:	2202      	movs	r2, #2
 8000e94:	4977      	ldr	r1, [pc, #476]	; (8001074 <main+0x214>)
 8000e96:	4878      	ldr	r0, [pc, #480]	; (8001078 <main+0x218>)
 8000e98:	f003 ff93 	bl	8004dc2 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 8000e9c:	4877      	ldr	r0, [pc, #476]	; (800107c <main+0x21c>)
 8000e9e:	f002 ff57 	bl	8003d50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4876      	ldr	r0, [pc, #472]	; (8001080 <main+0x220>)
 8000ea6:	f003 f81d 	bl	8003ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4874      	ldr	r0, [pc, #464]	; (8001080 <main+0x220>)
 8000eae:	f003 f819 	bl	8003ee4 <HAL_TIM_PWM_Start>
  Global_Status_Init();
 8000eb2:	f7ff ff77 	bl	8000da4 <Global_Status_Init>
  Counter_Init();
 8000eb6:	f7ff ff45 	bl	8000d44 <Counter_Init>
//	  stepper_step_angle(30, 1);

//	  motor_state_selector(MOTOR_F);
//	  stepper_motor_reset();

	  if (global_status == 0)
 8000eba:	4b72      	ldr	r3, [pc, #456]	; (8001084 <main+0x224>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10e      	bne.n	8000ee0 <main+0x80>
	  {
		  if (dma_tx_buffer[0] != 'M' && dma_tx_buffer[1] != 'M' )
 8000ec2:	4b71      	ldr	r3, [pc, #452]	; (8001088 <main+0x228>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ec8:	d007      	beq.n	8000eda <main+0x7a>
 8000eca:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <main+0x228>)
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	2b4d      	cmp	r3, #77	; 0x4d
 8000ed0:	d003      	beq.n	8000eda <main+0x7a>
		  {
			  global_status = 1;
 8000ed2:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <main+0x224>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <main+0x80>
		  }
		  else
		  {
			  motor_state_selector(MOTOR_F);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 fb52 	bl	8001584 <motor_state_selector>
		  }

	  }

	  if (global_status == 1)
 8000ee0:	4b68      	ldr	r3, [pc, #416]	; (8001084 <main+0x224>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d17b      	bne.n	8000fe0 <main+0x180>
	  {
		  if (reset_counter <= RESET_COUNT && spray_counter_1 <= CAMERA_HALT && spray_counter_2 <= CAMERA_HALT)
 8000ee8:	4b68      	ldr	r3, [pc, #416]	; (800108c <main+0x22c>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	2b64      	cmp	r3, #100	; 0x64
 8000eee:	d85c      	bhi.n	8000faa <main+0x14a>
 8000ef0:	4b67      	ldr	r3, [pc, #412]	; (8001090 <main+0x230>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d858      	bhi.n	8000faa <main+0x14a>
 8000ef8:	4b66      	ldr	r3, [pc, #408]	; (8001094 <main+0x234>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d854      	bhi.n	8000faa <main+0x14a>
		  {
			  // Rotate sprayer nozzle and track total degrees

			  if(direction == 0)
 8000f00:	4b65      	ldr	r3, [pc, #404]	; (8001098 <main+0x238>)
 8000f02:	f993 3000 	ldrsb.w	r3, [r3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d11f      	bne.n	8000f4a <main+0xea>
			  {
				  if(degree == 4.0)
 8000f0a:	4b64      	ldr	r3, [pc, #400]	; (800109c <main+0x23c>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f14:	eef4 7a47 	vcmp.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d105      	bne.n	8000f2a <main+0xca>
				  {
					  turn_counter = turn_counter + 2;
 8000f1e:	4b60      	ldr	r3, [pc, #384]	; (80010a0 <main+0x240>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3302      	adds	r3, #2
 8000f24:	4a5e      	ldr	r2, [pc, #376]	; (80010a0 <main+0x240>)
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e033      	b.n	8000f92 <main+0x132>
				  }
				  else if(degree == 2.0)
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <main+0x23c>)
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f34:	eef4 7a47 	vcmp.f32	s15, s14
 8000f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3c:	d129      	bne.n	8000f92 <main+0x132>
				  {
					  turn_counter = turn_counter + 1;;
 8000f3e:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <main+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a56      	ldr	r2, [pc, #344]	; (80010a0 <main+0x240>)
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e023      	b.n	8000f92 <main+0x132>
				  }
			  }
			  else if (direction == 1)
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <main+0x238>)
 8000f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d11e      	bne.n	8000f92 <main+0x132>
			  {
				  if(degree == 4.0)
 8000f54:	4b51      	ldr	r3, [pc, #324]	; (800109c <main+0x23c>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f5e:	eef4 7a47 	vcmp.f32	s15, s14
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	d105      	bne.n	8000f74 <main+0x114>
				  {
					  turn_counter = turn_counter - 2;
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <main+0x240>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <main+0x240>)
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e00e      	b.n	8000f92 <main+0x132>
				  }
				  else if(degree == 2.0)
 8000f74:	4b49      	ldr	r3, [pc, #292]	; (800109c <main+0x23c>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f7e:	eef4 7a47 	vcmp.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	d104      	bne.n	8000f92 <main+0x132>
				  {
					  turn_counter = turn_counter -1;
 8000f88:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <main+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a44      	ldr	r2, [pc, #272]	; (80010a0 <main+0x240>)
 8000f90:	6013      	str	r3, [r2, #0]
				  }
			  }
			  stepper_step_angle(degree, direction);
 8000f92:	4b42      	ldr	r3, [pc, #264]	; (800109c <main+0x23c>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <main+0x238>)
 8000f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa4:	f000 fb7a 	bl	800169c <stepper_step_angle>
 8000fa8:	e01a      	b.n	8000fe0 <main+0x180>
//			  } else {
//				  // The turn looks good, execute

//			  }
		  }
		  else if (reset_counter <= RESET_COUNT && spray_counter_1 > CAMERA_HALT && spray_counter_2 > CAMERA_HALT)
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <main+0x22c>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d80b      	bhi.n	8000fca <main+0x16a>
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <main+0x230>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d907      	bls.n	8000fca <main+0x16a>
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <main+0x234>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	d903      	bls.n	8000fca <main+0x16a>
		  {
			  global_status = 2;
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <main+0x224>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e00a      	b.n	8000fe0 <main+0x180>
		  }
		  else if (reset_counter > RESET_COUNT)
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <main+0x22c>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d906      	bls.n	8000fe0 <main+0x180>
		  {
			  stepper_motor_reset();
 8000fd2:	f7ff fef3 	bl	8000dbc <stepper_motor_reset>
			  Counter_Init();
 8000fd6:	f7ff feb5 	bl	8000d44 <Counter_Init>
			  global_status = 0;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <main+0x224>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
		  }
	  }


	  if (global_status == 2)
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <main+0x224>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d120      	bne.n	800102a <main+0x1ca>
	  {
		  if (spray_time <= SPRAYER_DELAY) {
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <main+0x244>)
 8000fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ff2:	dc0f      	bgt.n	8001014 <main+0x1b4>
			  HAL_GPIO_WritePin(SPRAYER_PIN_CLASS, SPRAYER_CONTROL_PIN, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	482b      	ldr	r0, [pc, #172]	; (80010a8 <main+0x248>)
 8000ffc:	f002 f9e6 	bl	80033cc <HAL_GPIO_WritePin>
			  spray_time++;
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <main+0x244>)
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	b29b      	uxth	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	b29b      	uxth	r3, r3
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <main+0x244>)
 8001010:	801a      	strh	r2, [r3, #0]
 8001012:	e00a      	b.n	800102a <main+0x1ca>
		  }
		  else
		  {
			  // We have finished spraying
			  HAL_GPIO_WritePin(SPRAYER_PIN_CLASS, SPRAYER_CONTROL_PIN, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101a:	4823      	ldr	r0, [pc, #140]	; (80010a8 <main+0x248>)
 800101c:	f002 f9d6 	bl	80033cc <HAL_GPIO_WritePin>
			  stepper_motor_reset();
 8001020:	f7ff fecc 	bl	8000dbc <stepper_motor_reset>
			  global_status = 3; // Reset
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <main+0x224>)
 8001026:	2203      	movs	r2, #3
 8001028:	701a      	strb	r2, [r3, #0]
		  }
	  }
//
	  if (global_status == 3)
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <main+0x224>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d117      	bne.n	8001062 <main+0x202>
	  {
		  // Reset the sprayer and move forward
		  if (ignore_counter <= IGNORE_DELAY)
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <main+0x24c>)
 8001034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001038:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800103c:	dc0c      	bgt.n	8001058 <main+0x1f8>
		  {
			  // Initialize the ignore timer
			  motor_state_selector(MOTOR_F);
 800103e:	2001      	movs	r0, #1
 8001040:	f000 faa0 	bl	8001584 <motor_state_selector>
			  ignore_counter++;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <main+0x24c>)
 8001046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104a:	b29b      	uxth	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <main+0x24c>)
 8001054:	801a      	strh	r2, [r3, #0]
 8001056:	e004      	b.n	8001062 <main+0x202>
		  }
		  else
		  {
			  Counter_Init();
 8001058:	f7ff fe74 	bl	8000d44 <Counter_Init>
			  global_status = 0;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <main+0x224>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
//    if (1) {
//    	motor_state_selector(MOTOR_STATE_VAR);
//    	motor_delay = MOTOR_DELAY;
//    }

    HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fecc 	bl	8001e00 <HAL_Delay>
	  if (global_status == 0)
 8001068:	e727      	b.n	8000eba <main+0x5a>
 800106a:	bf00      	nop
 800106c:	20000204 	.word	0x20000204
 8001070:	20000028 	.word	0x20000028
 8001074:	2000020c 	.word	0x2000020c
 8001078:	20000100 	.word	0x20000100
 800107c:	200000b8 	.word	0x200000b8
 8001080:	20000070 	.word	0x20000070
 8001084:	2000020e 	.word	0x2000020e
 8001088:	20000208 	.word	0x20000208
 800108c:	2000021a 	.word	0x2000021a
 8001090:	20000214 	.word	0x20000214
 8001094:	20000216 	.word	0x20000216
 8001098:	2000020f 	.word	0x2000020f
 800109c:	20000210 	.word	0x20000210
 80010a0:	20000220 	.word	0x20000220
 80010a4:	20000218 	.word	0x20000218
 80010a8:	40020400 	.word	0x40020400
 80010ac:	2000021c 	.word	0x2000021c

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 ff58 	bl	8005f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <SystemClock_Config+0xc8>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a26      	ldr	r2, [pc, #152]	; (8001178 <SystemClock_Config+0xc8>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <SystemClock_Config+0xc8>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <SystemClock_Config+0xcc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <SystemClock_Config+0xcc>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <SystemClock_Config+0xcc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001114:	2310      	movs	r3, #16
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001118:	2302      	movs	r3, #2
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111c:	2300      	movs	r3, #0
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001120:	2308      	movs	r3, #8
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001124:	2348      	movs	r3, #72	; 0x48
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f963 	bl	8003400 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001140:	f000 fbc0 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2102      	movs	r1, #2
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fbc5 	bl	80038f0 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800116c:	f000 fbaa 	bl	80018c4 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	; 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_ADC3_Init+0x98>)
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <MX_ADC3_Init+0x9c>)
 8001196:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_ADC3_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_ADC3_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_ADC3_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_ADC3_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_ADC3_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_ADC3_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_ADC3_Init+0x98>)
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_ADC3_Init+0xa0>)
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_ADC3_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_ADC3_Init+0x98>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_ADC3_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_ADC3_Init+0x98>)
 80011da:	2201      	movs	r2, #1
 80011dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011de:	480e      	ldr	r0, [pc, #56]	; (8001218 <MX_ADC3_Init+0x98>)
 80011e0:	f000 fe32 	bl	8001e48 <HAL_ADC_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fb6b 	bl	80018c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011ee:	230a      	movs	r3, #10
 80011f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_ADC3_Init+0x98>)
 8001200:	f000 ff94 	bl	800212c <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800120a:	f000 fb5b 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000028 	.word	0x20000028
 800121c:	40012200 	.word	0x40012200
 8001220:	0f000001 	.word	0x0f000001

08001224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <MX_TIM3_Init+0x100>)
 8001258:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <MX_TIM3_Init+0xfc>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001268:	f640 72ff 	movw	r2, #4095	; 0xfff
 800126c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800127a:	4829      	ldr	r0, [pc, #164]	; (8001320 <MX_TIM3_Init+0xfc>)
 800127c:	f002 fd18 	bl	8003cb0 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001286:	f000 fb1d 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001294:	4619      	mov	r1, r3
 8001296:	4822      	ldr	r0, [pc, #136]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001298:	f003 f8b6 	bl	8004408 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012a2:	f000 fb0f 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <MX_TIM3_Init+0xfc>)
 80012a8:	f002 fdc2 	bl	8003e30 <HAL_TIM_PWM_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012b2:	f000 fb07 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4619      	mov	r1, r3
 80012c4:	4816      	ldr	r0, [pc, #88]	; (8001320 <MX_TIM3_Init+0xfc>)
 80012c6:	f003 fc9f 	bl	8004c08 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012d0:	f000 faf8 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4095;
 80012d8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_TIM3_Init+0xfc>)
 80012ee:	f002 ffc9 	bl	8004284 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012f8:	f000 fae4 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001304:	f002 ffbe 	bl	8004284 <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800130e:	f000 fad9 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <MX_TIM3_Init+0xfc>)
 8001314:	f000 fb86 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 8001318:	bf00      	nop
 800131a:	3738      	adds	r7, #56	; 0x38
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000070 	.word	0x20000070
 8001324:	40000400 	.word	0x40000400

08001328 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM6_Init+0x64>)
 8001338:	4a15      	ldr	r2, [pc, #84]	; (8001390 <MX_TIM6_Init+0x68>)
 800133a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_TIM6_Init+0x64>)
 800133e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001342:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_TIM6_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_TIM6_Init+0x64>)
 800134c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001350:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_TIM6_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_TIM6_Init+0x64>)
 800135a:	f002 fca9 	bl	8003cb0 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001364:	f000 faae 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001368:	2320      	movs	r3, #32
 800136a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM6_Init+0x64>)
 8001376:	f003 fc47 	bl	8004c08 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 faa0 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000b8 	.word	0x200000b8
 8001390:	40001000 	.word	0x40001000

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f003 fcac 	bl	8004d28 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 fa75 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000100 	.word	0x20000100
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_DMA_Init+0x4c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <MX_DMA_Init+0x4c>)
 80013f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_DMA_Init+0x4c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2010      	movs	r0, #16
 8001410:	f001 fa07 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001414:	2010      	movs	r0, #16
 8001416:	f001 fa20 	bl	800285a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2011      	movs	r0, #17
 8001420:	f001 f9ff 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001424:	2011      	movs	r0, #17
 8001426:	f001 fa18 	bl	800285a <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b48      	ldr	r3, [pc, #288]	; (8001574 <MX_GPIO_Init+0x13c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a47      	ldr	r2, [pc, #284]	; (8001574 <MX_GPIO_Init+0x13c>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b45      	ldr	r3, [pc, #276]	; (8001574 <MX_GPIO_Init+0x13c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <MX_GPIO_Init+0x13c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a40      	ldr	r2, [pc, #256]	; (8001574 <MX_GPIO_Init+0x13c>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <MX_GPIO_Init+0x13c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <MX_GPIO_Init+0x13c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a39      	ldr	r2, [pc, #228]	; (8001574 <MX_GPIO_Init+0x13c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <MX_GPIO_Init+0x13c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <MX_GPIO_Init+0x13c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a32      	ldr	r2, [pc, #200]	; (8001574 <MX_GPIO_Init+0x13c>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <MX_GPIO_Init+0x13c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80014c4:	482c      	ldr	r0, [pc, #176]	; (8001578 <MX_GPIO_Init+0x140>)
 80014c6:	f001 ff81 	bl	80033cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	21f0      	movs	r1, #240	; 0xf0
 80014ce:	482b      	ldr	r0, [pc, #172]	; (800157c <MX_GPIO_Init+0x144>)
 80014d0:	f001 ff7c 	bl	80033cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80014da:	4829      	ldr	r0, [pc, #164]	; (8001580 <MX_GPIO_Init+0x148>)
 80014dc:	f001 ff76 	bl	80033cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4820      	ldr	r0, [pc, #128]	; (8001578 <MX_GPIO_Init+0x140>)
 80014f6:	f001 fdcd 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 80014fa:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4819      	ldr	r0, [pc, #100]	; (8001578 <MX_GPIO_Init+0x140>)
 8001514:	f001 fdbe 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001518:	2303      	movs	r3, #3
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_GPIO_Init+0x144>)
 800152c:	f001 fdb2 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001530:	23f0      	movs	r3, #240	; 0xf0
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_GPIO_Init+0x144>)
 8001548:	f001 fda4 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800154c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_GPIO_Init+0x148>)
 8001566:	f001 fd95 	bl	8003094 <HAL_GPIO_Init>

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40020800 	.word	0x40020800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400

08001584 <motor_state_selector>:
    ticks--;
  }
}


void motor_state_selector(int state) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	switch(state){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d87d      	bhi.n	800168e <motor_state_selector+0x10a>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <motor_state_selector+0x14>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015d7 	.word	0x080015d7
 80015a0:	08001605 	.word	0x08001605
 80015a4:	08001633 	.word	0x08001633
 80015a8:	08001661 	.word	0x08001661
	  case 0:
		  // Halt
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <motor_state_selector+0x110>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80015b4:	4b37      	ldr	r3, [pc, #220]	; (8001694 <motor_state_selector+0x110>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);// PIN B15 off
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <motor_state_selector+0x114>)
 80015c4:	f001 ff02 	bl	80033cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);// PIN B15 off
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ce:	4832      	ldr	r0, [pc, #200]	; (8001698 <motor_state_selector+0x114>)
 80015d0:	f001 fefc 	bl	80033cc <HAL_GPIO_WritePin>
		  return;
 80015d4:	e05b      	b.n	800168e <motor_state_selector+0x10a>
	  case 1:
		  // Forward
		  // 4095 correlates with max speed (100% duty cycle) in the forward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, HALF_SPEED);
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <motor_state_selector+0x110>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, HALF_SPEED);
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <motor_state_selector+0x110>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);// PIN B15 off
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f0:	4829      	ldr	r0, [pc, #164]	; (8001698 <motor_state_selector+0x114>)
 80015f2:	f001 feeb 	bl	80033cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);// PIN B14 off
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fc:	4826      	ldr	r0, [pc, #152]	; (8001698 <motor_state_selector+0x114>)
 80015fe:	f001 fee5 	bl	80033cc <HAL_GPIO_WritePin>
		  return;
 8001602:	e044      	b.n	800168e <motor_state_selector+0x10a>
	  case 2:
		  // Forward slowly
		  // 4095 correlates with max speed (100% duty cycle) in the forward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, REALLY_SLOW);
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <motor_state_selector+0x110>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, REALLY_SLOW);
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <motor_state_selector+0x110>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);// PIN B15 off
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161e:	481e      	ldr	r0, [pc, #120]	; (8001698 <motor_state_selector+0x114>)
 8001620:	f001 fed4 	bl	80033cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);// PIN B14 off
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	481b      	ldr	r0, [pc, #108]	; (8001698 <motor_state_selector+0x114>)
 800162c:	f001 fece 	bl	80033cc <HAL_GPIO_WritePin>
		  return;
 8001630:	e02d      	b.n	800168e <motor_state_selector+0x10a>
	  case 3:
		  // Backward
		  // 2048 correlates with max speed (50% duty cycle) in the backward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, REALLY_SLOW);
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <motor_state_selector+0x110>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, REALLY_SLOW);
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <motor_state_selector+0x110>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);// PIN B15 on
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <motor_state_selector+0x114>)
 800164e:	f001 febd 	bl	80033cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// PIN B14 on
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001658:	480f      	ldr	r0, [pc, #60]	; (8001698 <motor_state_selector+0x114>)
 800165a:	f001 feb7 	bl	80033cc <HAL_GPIO_WritePin>
		  return;
 800165e:	e016      	b.n	800168e <motor_state_selector+0x10a>
	  case 4:
		  // Backward
		  // 2048 correlates with max speed (50% duty cycle) in the backward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, REALLY_SLOW);
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <motor_state_selector+0x110>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, REALLY_SLOW);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <motor_state_selector+0x110>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001672:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);// PIN B15 on
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <motor_state_selector+0x114>)
 800167c:	f001 fea6 	bl	80033cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// PIN B14 on
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <motor_state_selector+0x114>)
 8001688:	f001 fea0 	bl	80033cc <HAL_GPIO_WritePin>
		  return;
 800168c:	bf00      	nop
	}
}
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000070 	.word	0x20000070
 8001698:	40020400 	.word	0x40020400

0800169c <stepper_step_angle>:


// BLOCKING OPERATION, TAKES <<ANGLE>> MILLISECONDS TO COMPLETE
void stepper_step_angle (float angle, int direction)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80016a6:	6038      	str	r0, [r7, #0]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <stepper_step_angle+0x90>)
 80016aa:	613b      	str	r3, [r7, #16]
	int numberofsequences = (int) (angle/anglepersequence);
 80016ac:	edd7 6a01 	vldr	s13, [r7, #4]
 80016b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016bc:	ee17 3a90 	vmov	r3, s15
 80016c0:	60fb      	str	r3, [r7, #12]

	for (int seq=0; seq<numberofsequences; seq++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e027      	b.n	8001718 <stepper_step_angle+0x7c>
	{
		if (direction == 0)  // for clockwise
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10f      	bne.n	80016ee <stepper_step_angle+0x52>
		{
			for (int step=7; step>=0; step--)
 80016ce:	2307      	movs	r3, #7
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e008      	b.n	80016e6 <stepper_step_angle+0x4a>
			{
				stepper_half_drive(step);
 80016d4:	69b8      	ldr	r0, [r7, #24]
 80016d6:	f000 f82b 	bl	8001730 <stepper_half_drive>
        HAL_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f000 fb90 	bl	8001e00 <HAL_Delay>
			for (int step=7; step>=0; step--)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	daf3      	bge.n	80016d4 <stepper_step_angle+0x38>
 80016ec:	e011      	b.n	8001712 <stepper_step_angle+0x76>
				// stepper_set_rpm(rpm);
			}

		}

		else if (direction == 1)  // for anti-clockwise
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10e      	bne.n	8001712 <stepper_step_angle+0x76>
		{
			for (int step=0; step<8; step++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e008      	b.n	800170c <stepper_step_angle+0x70>
			{
				stepper_half_drive(step);
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f000 f818 	bl	8001730 <stepper_half_drive>
        HAL_Delay(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f000 fb7d 	bl	8001e00 <HAL_Delay>
			for (int step=0; step<8; step++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b07      	cmp	r3, #7
 8001710:	ddf3      	ble.n	80016fa <stepper_step_angle+0x5e>
	for (int seq=0; seq<numberofsequences; seq++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbd3      	blt.n	80016c8 <stepper_step_angle+0x2c>
				// stepper_set_rpm(rpm);
			}
		}
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	3f340000 	.word	0x3f340000

08001730 <stepper_half_drive>:

void stepper_half_drive (int step)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  switch (step){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b07      	cmp	r3, #7
 800173c:	f200 80bc 	bhi.w	80018b8 <stepper_half_drive+0x188>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <stepper_half_drive+0x18>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001769 	.word	0x08001769
 800174c:	08001793 	.word	0x08001793
 8001750:	080017bd 	.word	0x080017bd
 8001754:	080017e7 	.word	0x080017e7
 8001758:	08001811 	.word	0x08001811
 800175c:	0800183b 	.word	0x0800183b
 8001760:	08001865 	.word	0x08001865
 8001764:	0800188f 	.word	0x0800188f
    case 0:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN1
 8001768:	2201      	movs	r2, #1
 800176a:	2110      	movs	r1, #16
 800176c:	4854      	ldr	r0, [pc, #336]	; (80018c0 <stepper_half_drive+0x190>)
 800176e:	f001 fe2d 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 8001772:	2200      	movs	r2, #0
 8001774:	2120      	movs	r1, #32
 8001776:	4852      	ldr	r0, [pc, #328]	; (80018c0 <stepper_half_drive+0x190>)
 8001778:	f001 fe28 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 800177c:	2200      	movs	r2, #0
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	484f      	ldr	r0, [pc, #316]	; (80018c0 <stepper_half_drive+0x190>)
 8001782:	f001 fe23 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 8001786:	2200      	movs	r2, #0
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	484d      	ldr	r0, [pc, #308]	; (80018c0 <stepper_half_drive+0x190>)
 800178c:	f001 fe1e 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 8001790:	e092      	b.n	80018b8 <stepper_half_drive+0x188>

    case 1:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN1
 8001792:	2201      	movs	r2, #1
 8001794:	2110      	movs	r1, #16
 8001796:	484a      	ldr	r0, [pc, #296]	; (80018c0 <stepper_half_drive+0x190>)
 8001798:	f001 fe18 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN2
 800179c:	2201      	movs	r2, #1
 800179e:	2120      	movs	r1, #32
 80017a0:	4847      	ldr	r0, [pc, #284]	; (80018c0 <stepper_half_drive+0x190>)
 80017a2:	f001 fe13 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 80017a6:	2200      	movs	r2, #0
 80017a8:	2140      	movs	r1, #64	; 0x40
 80017aa:	4845      	ldr	r0, [pc, #276]	; (80018c0 <stepper_half_drive+0x190>)
 80017ac:	f001 fe0e 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 80017b0:	2200      	movs	r2, #0
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	4842      	ldr	r0, [pc, #264]	; (80018c0 <stepper_half_drive+0x190>)
 80017b6:	f001 fe09 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 80017ba:	e07d      	b.n	80018b8 <stepper_half_drive+0x188>

    case 2:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 80017bc:	2200      	movs	r2, #0
 80017be:	2110      	movs	r1, #16
 80017c0:	483f      	ldr	r0, [pc, #252]	; (80018c0 <stepper_half_drive+0x190>)
 80017c2:	f001 fe03 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN2
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	483d      	ldr	r0, [pc, #244]	; (80018c0 <stepper_half_drive+0x190>)
 80017cc:	f001 fdfe 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 80017d0:	2200      	movs	r2, #0
 80017d2:	2140      	movs	r1, #64	; 0x40
 80017d4:	483a      	ldr	r0, [pc, #232]	; (80018c0 <stepper_half_drive+0x190>)
 80017d6:	f001 fdf9 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 80017da:	2200      	movs	r2, #0
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	4838      	ldr	r0, [pc, #224]	; (80018c0 <stepper_half_drive+0x190>)
 80017e0:	f001 fdf4 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 80017e4:	e068      	b.n	80018b8 <stepper_half_drive+0x188>

    case 3:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 80017e6:	2200      	movs	r2, #0
 80017e8:	2110      	movs	r1, #16
 80017ea:	4835      	ldr	r0, [pc, #212]	; (80018c0 <stepper_half_drive+0x190>)
 80017ec:	f001 fdee 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN2
 80017f0:	2201      	movs	r2, #1
 80017f2:	2120      	movs	r1, #32
 80017f4:	4832      	ldr	r0, [pc, #200]	; (80018c0 <stepper_half_drive+0x190>)
 80017f6:	f001 fde9 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN3
 80017fa:	2201      	movs	r2, #1
 80017fc:	2140      	movs	r1, #64	; 0x40
 80017fe:	4830      	ldr	r0, [pc, #192]	; (80018c0 <stepper_half_drive+0x190>)
 8001800:	f001 fde4 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 8001804:	2200      	movs	r2, #0
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	482d      	ldr	r0, [pc, #180]	; (80018c0 <stepper_half_drive+0x190>)
 800180a:	f001 fddf 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 800180e:	e053      	b.n	80018b8 <stepper_half_drive+0x188>

    case 4:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 8001810:	2200      	movs	r2, #0
 8001812:	2110      	movs	r1, #16
 8001814:	482a      	ldr	r0, [pc, #168]	; (80018c0 <stepper_half_drive+0x190>)
 8001816:	f001 fdd9 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 800181a:	2200      	movs	r2, #0
 800181c:	2120      	movs	r1, #32
 800181e:	4828      	ldr	r0, [pc, #160]	; (80018c0 <stepper_half_drive+0x190>)
 8001820:	f001 fdd4 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN3
 8001824:	2201      	movs	r2, #1
 8001826:	2140      	movs	r1, #64	; 0x40
 8001828:	4825      	ldr	r0, [pc, #148]	; (80018c0 <stepper_half_drive+0x190>)
 800182a:	f001 fdcf 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 800182e:	2200      	movs	r2, #0
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	4823      	ldr	r0, [pc, #140]	; (80018c0 <stepper_half_drive+0x190>)
 8001834:	f001 fdca 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 8001838:	e03e      	b.n	80018b8 <stepper_half_drive+0x188>

    case 5:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 800183a:	2200      	movs	r2, #0
 800183c:	2110      	movs	r1, #16
 800183e:	4820      	ldr	r0, [pc, #128]	; (80018c0 <stepper_half_drive+0x190>)
 8001840:	f001 fdc4 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 8001844:	2200      	movs	r2, #0
 8001846:	2120      	movs	r1, #32
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <stepper_half_drive+0x190>)
 800184a:	f001 fdbf 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN3
 800184e:	2201      	movs	r2, #1
 8001850:	2140      	movs	r1, #64	; 0x40
 8001852:	481b      	ldr	r0, [pc, #108]	; (80018c0 <stepper_half_drive+0x190>)
 8001854:	f001 fdba 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN4
 8001858:	2201      	movs	r2, #1
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	4818      	ldr	r0, [pc, #96]	; (80018c0 <stepper_half_drive+0x190>)
 800185e:	f001 fdb5 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 8001862:	e029      	b.n	80018b8 <stepper_half_drive+0x188>

    case 6:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 8001864:	2200      	movs	r2, #0
 8001866:	2110      	movs	r1, #16
 8001868:	4815      	ldr	r0, [pc, #84]	; (80018c0 <stepper_half_drive+0x190>)
 800186a:	f001 fdaf 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 800186e:	2200      	movs	r2, #0
 8001870:	2120      	movs	r1, #32
 8001872:	4813      	ldr	r0, [pc, #76]	; (80018c0 <stepper_half_drive+0x190>)
 8001874:	f001 fdaa 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 8001878:	2200      	movs	r2, #0
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <stepper_half_drive+0x190>)
 800187e:	f001 fda5 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN4
 8001882:	2201      	movs	r2, #1
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <stepper_half_drive+0x190>)
 8001888:	f001 fda0 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 800188c:	e014      	b.n	80018b8 <stepper_half_drive+0x188>

    case 7:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN1
 800188e:	2201      	movs	r2, #1
 8001890:	2110      	movs	r1, #16
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <stepper_half_drive+0x190>)
 8001894:	f001 fd9a 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 8001898:	2200      	movs	r2, #0
 800189a:	2120      	movs	r1, #32
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <stepper_half_drive+0x190>)
 800189e:	f001 fd95 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 80018a2:	2200      	movs	r2, #0
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <stepper_half_drive+0x190>)
 80018a8:	f001 fd90 	bl	80033cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN4
 80018ac:	2201      	movs	r2, #1
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <stepper_half_drive+0x190>)
 80018b2:	f001 fd8b 	bl	80033cc <HAL_GPIO_WritePin>
        break;
 80018b6:	bf00      	nop

    }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020000 	.word	0x40020000

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	e7fe      	b.n	80018cc <Error_Handler+0x8>
	...

080018d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_ADC_MspInit+0x7c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d127      	bne.n	8001992 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 800194c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_ADC_MspInit+0x80>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800197a:	2301      	movs	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197e:	2303      	movs	r3, #3
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_ADC_MspInit+0x84>)
 800198e:	f001 fb81 	bl	8003094 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40012200 	.word	0x40012200
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <HAL_TIM_Base_MspInit+0x70>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10e      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_TIM_Base_MspInit+0x74>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <HAL_TIM_Base_MspInit+0x74>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_TIM_Base_MspInit+0x74>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019d6:	e01a      	b.n	8001a0e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_TIM_Base_MspInit+0x78>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d115      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_TIM_Base_MspInit+0x74>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x74>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_Base_MspInit+0x74>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2036      	movs	r0, #54	; 0x36
 8001a04:	f000 ff0d 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a08:	2036      	movs	r0, #54	; 0x36
 8001a0a:	f000 ff26 	bl	800285a <HAL_NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40001000 	.word	0x40001000

08001a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <HAL_TIM_MspPostInit+0x68>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11d      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_TIM_MspPostInit+0x6c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_TIM_MspPostInit+0x6c>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_TIM_MspPostInit+0x6c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a62:	23c0      	movs	r3, #192	; 0xc0
 8001a64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_TIM_MspPostInit+0x70>)
 8001a7e:	f001 fb09 	bl	8003094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020800 	.word	0x40020800

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a4b      	ldr	r2, [pc, #300]	; (8001be4 <HAL_UART_MspInit+0x14c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	f040 8090 	bne.w	8001bdc <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <HAL_UART_MspInit+0x150>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4a48      	ldr	r2, [pc, #288]	; (8001be8 <HAL_UART_MspInit+0x150>)
 8001ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
 8001acc:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_UART_MspInit+0x150>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <HAL_UART_MspInit+0x150>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a41      	ldr	r2, [pc, #260]	; (8001be8 <HAL_UART_MspInit+0x150>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_UART_MspInit+0x150>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001af4:	230c      	movs	r3, #12
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b04:	2307      	movs	r3, #7
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4837      	ldr	r0, [pc, #220]	; (8001bec <HAL_UART_MspInit+0x154>)
 8001b10:	f001 fac0 	bl	8003094 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b16:	4a37      	ldr	r2, [pc, #220]	; (8001bf4 <HAL_UART_MspInit+0x15c>)
 8001b18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b20:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b54:	4826      	ldr	r0, [pc, #152]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b56:	f000 fe9b 	bl	8002890 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b60:	f7ff feb0 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
 8001b6a:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_UART_MspInit+0x158>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_UART_MspInit+0x164>)
 8001b74:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001b80:	2240      	movs	r2, #64	; 0x40
 8001b82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b90:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bb0:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001bb2:	f000 fe6d 	bl	8002890 <HAL_DMA_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001bbc:	f7ff fe82 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <HAL_UART_MspInit+0x160>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2026      	movs	r0, #38	; 0x26
 8001bd2:	f000 fe26 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd6:	2026      	movs	r0, #38	; 0x26
 8001bd8:	f000 fe3f 	bl	800285a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40004400 	.word	0x40004400
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	20000144 	.word	0x20000144
 8001bf4:	40026088 	.word	0x40026088
 8001bf8:	200001a4 	.word	0x200001a4
 8001bfc:	400260a0 	.word	0x400260a0

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <NMI_Handler+0x4>

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler+0x4>

08001c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 f8b8 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <DMA1_Stream5_IRQHandler+0x10>)
 8001c5a:	f000 ffb1 	bl	8002bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000144 	.word	0x20000144

08001c68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <DMA1_Stream6_IRQHandler+0x10>)
 8001c6e:	f000 ffa7 	bl	8002bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200001a4 	.word	0x200001a4

08001c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <USART2_IRQHandler+0x10>)
 8001c82:	f003 f8cf 	bl	8004e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000100 	.word	0x20000100

08001c90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM6_DAC_IRQHandler+0x10>)
 8001c96:	f002 f9ed 	bl	8004074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200000b8 	.word	0x200000b8

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce4:	4c0b      	ldr	r4, [pc, #44]	; (8001d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf2:	f7ff ffd7 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f004 f919 	bl	8005f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff f8b1 	bl	8000e60 <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d0c:	08005fcc 	.word	0x08005fcc
  ldr r2, =_sbss
 8001d10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d14:	20000228 	.word	0x20000228

08001d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 fd61 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff fdbe 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fd79 	bl	8002876 <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 fd41 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000224 	.word	0x20000224

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000224 	.word	0x20000224

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008

08001e48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e033      	b.n	8001ec6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fd5a 	bl	8001920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e8e:	f023 0302 	bic.w	r3, r3, #2
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fa68 	bl	8002370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb6:	e001      	b.n	8001ebc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Start_DMA+0x1e>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0e9      	b.n	80020c2 <HAL_ADC_Start_DMA+0x1f2>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d018      	beq.n	8001f36 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f14:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_ADC_Start_DMA+0x1fc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6d      	ldr	r2, [pc, #436]	; (80020d0 <HAL_ADC_Start_DMA+0x200>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9a      	lsrs	r2, r3, #18
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f44:	d107      	bne.n	8001f56 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f54:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f040 80a1 	bne.w	80020a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa4:	d106      	bne.n	8001fb4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f023 0206 	bic.w	r2, r3, #6
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
 8001fb2:	e002      	b.n	8001fba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc2:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <HAL_ADC_Start_DMA+0x204>)
 8001fc4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	4a43      	ldr	r2, [pc, #268]	; (80020d8 <HAL_ADC_Start_DMA+0x208>)
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	4a42      	ldr	r2, [pc, #264]	; (80020dc <HAL_ADC_Start_DMA+0x20c>)
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <HAL_ADC_Start_DMA+0x210>)
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ff6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002006:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	334c      	adds	r3, #76	; 0x4c
 8002012:	4619      	mov	r1, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f000 fce8 	bl	80029ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12a      	bne.n	800207e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_ADC_Start_DMA+0x214>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d015      	beq.n	800205e <HAL_ADC_Start_DMA+0x18e>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <HAL_ADC_Start_DMA+0x218>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d105      	bne.n	8002048 <HAL_ADC_Start_DMA+0x178>
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_ADC_Start_DMA+0x204>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a27      	ldr	r2, [pc, #156]	; (80020ec <HAL_ADC_Start_DMA+0x21c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d136      	bne.n	80020c0 <HAL_ADC_Start_DMA+0x1f0>
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_ADC_Start_DMA+0x204>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d130      	bne.n	80020c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d129      	bne.n	80020c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	e020      	b.n	80020c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <HAL_ADC_Start_DMA+0x214>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d11b      	bne.n	80020c0 <HAL_ADC_Start_DMA+0x1f0>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d114      	bne.n	80020c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	e00b      	b.n	80020c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f043 0210 	orr.w	r2, r3, #16
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	40012300 	.word	0x40012300
 80020d8:	08002569 	.word	0x08002569
 80020dc:	08002623 	.word	0x08002623
 80020e0:	0800263f 	.word	0x0800263f
 80020e4:	40012000 	.word	0x40012000
 80020e8:	40012100 	.word	0x40012100
 80020ec:	40012200 	.word	0x40012200

080020f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1c>
 8002144:	2302      	movs	r3, #2
 8002146:	e105      	b.n	8002354 <HAL_ADC_ConfigChannel+0x228>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d925      	bls.n	80021a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43da      	mvns	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	400a      	ands	r2, r1
 800217c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68d9      	ldr	r1, [r3, #12]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	4603      	mov	r3, r0
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4403      	add	r3, r0
 8002196:	3b1e      	subs	r3, #30
 8002198:	409a      	lsls	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	e022      	b.n	80021ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6919      	ldr	r1, [r3, #16]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	2207      	movs	r2, #7
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	400a      	ands	r2, r1
 80021c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4403      	add	r3, r0
 80021e0:	409a      	lsls	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d824      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b05      	subs	r3, #5
 8002204:	221f      	movs	r2, #31
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	400a      	ands	r2, r1
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b05      	subs	r3, #5
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
 800223a:	e04c      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b0c      	cmp	r3, #12
 8002242:	d824      	bhi.n	800228e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b23      	subs	r3, #35	; 0x23
 8002256:	221f      	movs	r2, #31
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43da      	mvns	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	400a      	ands	r2, r1
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3b23      	subs	r3, #35	; 0x23
 8002280:	fa00 f203 	lsl.w	r2, r0, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
 800228c:	e023      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b41      	subs	r3, #65	; 0x41
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b41      	subs	r3, #65	; 0x41
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_ADC_ConfigChannel+0x234>)
 80022d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_ADC_ConfigChannel+0x238>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1cc>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <HAL_ADC_ConfigChannel+0x238>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d123      	bne.n	800234a <HAL_ADC_ConfigChannel+0x21e>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d003      	beq.n	8002312 <HAL_ADC_ConfigChannel+0x1e6>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b11      	cmp	r3, #17
 8002310:	d11b      	bne.n	800234a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b10      	cmp	r3, #16
 8002324:	d111      	bne.n	800234a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_ADC_ConfigChannel+0x23c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_ADC_ConfigChannel+0x240>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9a      	lsrs	r2, r3, #18
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800233c:	e002      	b.n	8002344 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3b01      	subs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40012300 	.word	0x40012300
 8002364:	40012000 	.word	0x40012000
 8002368:	20000000 	.word	0x20000000
 800236c:	431bde83 	.word	0x431bde83

08002370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002378:	4b79      	ldr	r3, [pc, #484]	; (8002560 <ADC_Init+0x1f0>)
 800237a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	431a      	orrs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	021a      	lsls	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6899      	ldr	r1, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	4a58      	ldr	r2, [pc, #352]	; (8002564 <ADC_Init+0x1f4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002416:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	e00f      	b.n	800246e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800245c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800246c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0202 	bic.w	r2, r2, #2
 800247c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e1b      	ldrb	r3, [r3, #24]
 8002488:	005a      	lsls	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	3b01      	subs	r3, #1
 80024c8:	035a      	lsls	r2, r3, #13
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	e007      	b.n	80024e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	3b01      	subs	r3, #1
 8002500:	051a      	lsls	r2, r3, #20
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002526:	025a      	lsls	r2, r3, #9
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	029a      	lsls	r2, r3, #10
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40012300 	.word	0x40012300
 8002564:	0f000001 	.word	0x0f000001

08002568 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800257e:	2b00      	cmp	r3, #0
 8002580:	d13c      	bne.n	80025fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d12b      	bne.n	80025f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d127      	bne.n	80025f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d119      	bne.n	80025f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0220 	bic.w	r2, r2, #32
 80025ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fd7b 	bl	80020f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025fa:	e00e      	b.n	800261a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f7ff fd85 	bl	8002118 <HAL_ADC_ErrorCallback>
}
 800260e:	e004      	b.n	800261a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff fd67 	bl	8002104 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f043 0204 	orr.w	r2, r3, #4
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff fd5a 	bl	8002118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4907      	ldr	r1, [pc, #28]	; (8002708 <__NVIC_EnableIRQ+0x38>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff29 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff3e 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff8e 	bl	8002760 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5d 	bl	800270c <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff31 	bl	80026d0 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffa2 	bl	80027c8 <SysTick_Config>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff faa4 	bl	8001de8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e099      	b.n	80029e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028cc:	e00f      	b.n	80028ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ce:	f7ff fa8b 	bl	8001de8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d908      	bls.n	80028ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2203      	movs	r2, #3
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e078      	b.n	80029e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e8      	bne.n	80028ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_DMA_Init+0x158>)
 8002908:	4013      	ands	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b04      	cmp	r3, #4
 8002946:	d107      	bne.n	8002958 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4313      	orrs	r3, r2
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b04      	cmp	r3, #4
 8002980:	d117      	bne.n	80029b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00e      	beq.n	80029b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fb01 	bl	8002f9c <DMA_CheckFifoParam>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029ae:	2301      	movs	r3, #1
 80029b0:	e016      	b.n	80029e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fab8 	bl	8002f30 <DMA_CalcBaseAndBitshift>
 80029c0:	4603      	mov	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	223f      	movs	r2, #63	; 0x3f
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	f010803f 	.word	0xf010803f

080029ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_DMA_Start_IT+0x26>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e040      	b.n	8002a94 <HAL_DMA_Start_IT+0xa8>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d12f      	bne.n	8002a86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fa4a 	bl	8002ed4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	223f      	movs	r2, #63	; 0x3f
 8002a46:	409a      	lsls	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0216 	orr.w	r2, r2, #22
 8002a5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0208 	orr.w	r2, r2, #8
 8002a72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e005      	b.n	8002a92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aaa:	f7ff f99d 	bl	8001de8 <HAL_GetTick>
 8002aae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d008      	beq.n	8002ace <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e052      	b.n	8002b74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0216 	bic.w	r2, r2, #22
 8002adc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <HAL_DMA_Abort+0x62>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1e:	e013      	b.n	8002b48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b20:	f7ff f962 	bl	8001de8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d90c      	bls.n	8002b48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2203      	movs	r2, #3
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e015      	b.n	8002b74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e4      	bne.n	8002b20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	223f      	movs	r2, #63	; 0x3f
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00c      	b.n	8002bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bcc:	4b8e      	ldr	r3, [pc, #568]	; (8002e08 <HAL_DMA_IRQHandler+0x248>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a8e      	ldr	r2, [pc, #568]	; (8002e0c <HAL_DMA_IRQHandler+0x24c>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0a9b      	lsrs	r3, r3, #10
 8002bd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2208      	movs	r2, #8
 8002bec:	409a      	lsls	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01a      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0204 	bic.w	r2, r2, #4
 8002c12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2208      	movs	r2, #8
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	2201      	movs	r2, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d012      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	2201      	movs	r2, #1
 8002c50:	409a      	lsls	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f043 0202 	orr.w	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	2204      	movs	r2, #4
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	2204      	movs	r2, #4
 8002c86:	409a      	lsls	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d043      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d03c      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	2210      	movs	r2, #16
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d018      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d024      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
 8002cee:	e01f      	b.n	8002d30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
 8002d00:	e016      	b.n	8002d30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0208 	bic.w	r2, r2, #8
 8002d1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	2220      	movs	r2, #32
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 808f 	beq.w	8002e60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8087 	beq.w	8002e60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	2220      	movs	r2, #32
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d136      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0216 	bic.w	r2, r2, #22
 8002d78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <HAL_DMA_IRQHandler+0x1da>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0208 	bic.w	r2, r2, #8
 8002da8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	223f      	movs	r2, #63	; 0x3f
 8002db0:	409a      	lsls	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d07e      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
        }
        return;
 8002dd6:	e079      	b.n	8002ecc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01d      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d031      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
 8002e04:	e02c      	b.n	8002e60 <HAL_DMA_IRQHandler+0x2a0>
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d023      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
 8002e20:	e01e      	b.n	8002e60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10f      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0210 	bic.w	r2, r2, #16
 8002e3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d032      	beq.n	8002ece <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d022      	beq.n	8002eba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2205      	movs	r2, #5
 8002e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d307      	bcc.n	8002ea8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f2      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x2cc>
 8002ea6:	e000      	b.n	8002eaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ea8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
 8002eca:	e000      	b.n	8002ece <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ecc:	bf00      	nop
    }
  }
}
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d108      	bne.n	8002f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f12:	e007      	b.n	8002f24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3b10      	subs	r3, #16
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <DMA_CalcBaseAndBitshift+0x64>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f4a:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <DMA_CalcBaseAndBitshift+0x68>)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d909      	bls.n	8002f72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	1d1a      	adds	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f70:	e007      	b.n	8002f82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	aaaaaaab 	.word	0xaaaaaaab
 8002f98:	08005fb4 	.word	0x08005fb4

08002f9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11f      	bne.n	8002ff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d856      	bhi.n	800306a <DMA_CheckFifoParam+0xce>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <DMA_CheckFifoParam+0x28>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fe7 	.word	0x08002fe7
 8002fcc:	08002fd5 	.word	0x08002fd5
 8002fd0:	0800306b 	.word	0x0800306b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d046      	beq.n	800306e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe4:	e043      	b.n	800306e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fee:	d140      	bne.n	8003072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff4:	e03d      	b.n	8003072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffe:	d121      	bne.n	8003044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d837      	bhi.n	8003076 <DMA_CheckFifoParam+0xda>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <DMA_CheckFifoParam+0x70>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	0800301d 	.word	0x0800301d
 8003010:	08003023 	.word	0x08003023
 8003014:	0800301d 	.word	0x0800301d
 8003018:	08003035 	.word	0x08003035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      break;
 8003020:	e030      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d025      	beq.n	800307a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003032:	e022      	b.n	800307a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800303c:	d11f      	bne.n	800307e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003042:	e01c      	b.n	800307e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d903      	bls.n	8003052 <DMA_CheckFifoParam+0xb6>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d003      	beq.n	8003058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003050:	e018      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      break;
 8003056:	e015      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00e      	beq.n	8003082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e00b      	b.n	8003082 <DMA_CheckFifoParam+0xe6>
      break;
 800306a:	bf00      	nop
 800306c:	e00a      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 800306e:	bf00      	nop
 8003070:	e008      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 8003072:	bf00      	nop
 8003074:	e006      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 8003076:	bf00      	nop
 8003078:	e004      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;   
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 8003082:	bf00      	nop
    }
  } 
  
  return status; 
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop

08003094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e16b      	b.n	8003388 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030b0:	2201      	movs	r2, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f040 815a 	bne.w	8003382 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d005      	beq.n	80030e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d130      	bne.n	8003148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2203      	movs	r2, #3
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800311c:	2201      	movs	r2, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 0201 	and.w	r2, r3, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b03      	cmp	r3, #3
 8003152:	d017      	beq.n	8003184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d123      	bne.n	80031d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	220f      	movs	r2, #15
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	08da      	lsrs	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3208      	adds	r2, #8
 80031d2:	69b9      	ldr	r1, [r7, #24]
 80031d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80b4 	beq.w	8003382 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b60      	ldr	r3, [pc, #384]	; (80033a0 <HAL_GPIO_Init+0x30c>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	4a5f      	ldr	r2, [pc, #380]	; (80033a0 <HAL_GPIO_Init+0x30c>)
 8003224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003228:	6453      	str	r3, [r2, #68]	; 0x44
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_GPIO_Init+0x30c>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003236:	4a5b      	ldr	r2, [pc, #364]	; (80033a4 <HAL_GPIO_Init+0x310>)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_GPIO_Init+0x314>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d02b      	beq.n	80032ba <HAL_GPIO_Init+0x226>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a51      	ldr	r2, [pc, #324]	; (80033ac <HAL_GPIO_Init+0x318>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d025      	beq.n	80032b6 <HAL_GPIO_Init+0x222>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a50      	ldr	r2, [pc, #320]	; (80033b0 <HAL_GPIO_Init+0x31c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01f      	beq.n	80032b2 <HAL_GPIO_Init+0x21e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4f      	ldr	r2, [pc, #316]	; (80033b4 <HAL_GPIO_Init+0x320>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d019      	beq.n	80032ae <HAL_GPIO_Init+0x21a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <HAL_GPIO_Init+0x324>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_Init+0x216>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4d      	ldr	r2, [pc, #308]	; (80033bc <HAL_GPIO_Init+0x328>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00d      	beq.n	80032a6 <HAL_GPIO_Init+0x212>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4c      	ldr	r2, [pc, #304]	; (80033c0 <HAL_GPIO_Init+0x32c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_Init+0x20e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4b      	ldr	r2, [pc, #300]	; (80033c4 <HAL_GPIO_Init+0x330>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_GPIO_Init+0x20a>
 800329a:	2307      	movs	r3, #7
 800329c:	e00e      	b.n	80032bc <HAL_GPIO_Init+0x228>
 800329e:	2308      	movs	r3, #8
 80032a0:	e00c      	b.n	80032bc <HAL_GPIO_Init+0x228>
 80032a2:	2306      	movs	r3, #6
 80032a4:	e00a      	b.n	80032bc <HAL_GPIO_Init+0x228>
 80032a6:	2305      	movs	r3, #5
 80032a8:	e008      	b.n	80032bc <HAL_GPIO_Init+0x228>
 80032aa:	2304      	movs	r3, #4
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x228>
 80032ae:	2303      	movs	r3, #3
 80032b0:	e004      	b.n	80032bc <HAL_GPIO_Init+0x228>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e002      	b.n	80032bc <HAL_GPIO_Init+0x228>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_GPIO_Init+0x228>
 80032ba:	2300      	movs	r3, #0
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f002 0203 	and.w	r2, r2, #3
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	4093      	lsls	r3, r2
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032cc:	4935      	ldr	r1, [pc, #212]	; (80033a4 <HAL_GPIO_Init+0x310>)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_GPIO_Init+0x334>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032fe:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <HAL_GPIO_Init+0x334>)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003304:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_GPIO_Init+0x334>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003328:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <HAL_GPIO_Init+0x334>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <HAL_GPIO_Init+0x334>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003352:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_GPIO_Init+0x334>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_GPIO_Init+0x334>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_GPIO_Init+0x334>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3301      	adds	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	f67f ae90 	bls.w	80030b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3724      	adds	r7, #36	; 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40021400 	.word	0x40021400
 80033c0:	40021800 	.word	0x40021800
 80033c4:	40021c00 	.word	0x40021c00
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
 80033d8:	4613      	mov	r3, r2
 80033da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033dc:	787b      	ldrb	r3, [r7, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e8:	e003      	b.n	80033f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	619a      	str	r2, [r3, #24]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e267      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d00c      	beq.n	8003444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d112      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003436:	4b82      	ldr	r3, [pc, #520]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d10b      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05b      	beq.n	8003508 <HAL_RCC_OscConfig+0x108>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d157      	bne.n	8003508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e242      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d106      	bne.n	8003474 <HAL_RCC_OscConfig+0x74>
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a75      	ldr	r2, [pc, #468]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e01d      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x98>
 800347e:	4b70      	ldr	r3, [pc, #448]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6f      	ldr	r2, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b6d      	ldr	r3, [pc, #436]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a6c      	ldr	r2, [pc, #432]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003498:	4b69      	ldr	r3, [pc, #420]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a68      	ldr	r2, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe fc96 	bl	8001de8 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe fc92 	bl	8001de8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e207      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0xc0>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe fc82 	bl	8001de8 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe fc7e 	bl	8001de8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1f3      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0xe8>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003516:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352a:	2b08      	cmp	r3, #8
 800352c:	d11c      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352e:	4b44      	ldr	r3, [pc, #272]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1c7      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4937      	ldr	r1, [pc, #220]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	e03a      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <HAL_RCC_OscConfig+0x244>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fe fc37 	bl	8001de8 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357e:	f7fe fc33 	bl	8001de8 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1a8      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4925      	ldr	r1, [pc, #148]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCC_OscConfig+0x244>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe fc16 	bl	8001de8 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fe fc12 	bl	8001de8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e187      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d036      	beq.n	8003658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_RCC_OscConfig+0x248>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe fbf6 	bl	8001de8 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003600:	f7fe fbf2 	bl	8001de8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e167      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x240>)
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x200>
 800361e:	e01b      	b.n	8003658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_OscConfig+0x248>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fe fbdf 	bl	8001de8 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	e00e      	b.n	800364c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362e:	f7fe fbdb 	bl	8001de8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d907      	bls.n	800364c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e150      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
 8003640:	40023800 	.word	0x40023800
 8003644:	42470000 	.word	0x42470000
 8003648:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ea      	bne.n	800362e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8097 	beq.w	8003794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	4b7d      	ldr	r3, [pc, #500]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a7c      	ldr	r2, [pc, #496]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
 8003686:	4b7a      	ldr	r3, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b77      	ldr	r3, [pc, #476]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	4b74      	ldr	r3, [pc, #464]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a73      	ldr	r2, [pc, #460]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fb9b 	bl	8001de8 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fe fb97 	bl	8001de8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e10c      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCC_OscConfig+0x474>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x2ea>
 80036dc:	4b64      	ldr	r3, [pc, #400]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	e01c      	b.n	8003724 <HAL_RCC_OscConfig+0x324>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x30c>
 80036f2:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a5e      	ldr	r2, [pc, #376]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	4b5c      	ldr	r3, [pc, #368]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a5b      	ldr	r2, [pc, #364]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6713      	str	r3, [r2, #112]	; 0x70
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0x324>
 800370c:	4b58      	ldr	r3, [pc, #352]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a57      	ldr	r2, [pc, #348]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
 8003718:	4b55      	ldr	r3, [pc, #340]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a54      	ldr	r2, [pc, #336]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800371e:	f023 0304 	bic.w	r3, r3, #4
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe fb5c 	bl	8001de8 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe fb58 	bl	8001de8 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0cb      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0ee      	beq.n	8003734 <HAL_RCC_OscConfig+0x334>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003758:	f7fe fb46 	bl	8001de8 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe fb42 	bl	8001de8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0b5      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ee      	bne.n	8003760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003788:	4b39      	ldr	r3, [pc, #228]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	4a38      	ldr	r2, [pc, #224]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800378e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003792:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a1 	beq.w	80038e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800379e:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d05c      	beq.n	8003864 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d141      	bne.n	8003836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCC_OscConfig+0x478>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fb16 	bl	8001de8 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fb12 	bl	8001de8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e087      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	3b01      	subs	r3, #1
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	491b      	ldr	r1, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x478>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe faeb 	bl	8001de8 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe fae7 	bl	8001de8 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e05c      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x416>
 8003834:	e054      	b.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCC_OscConfig+0x478>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe fad4 	bl	8001de8 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fad0 	bl	8001de8 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e045      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCC_OscConfig+0x470>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x444>
 8003862:	e03d      	b.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e038      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
 8003870:	40023800 	.word	0x40023800
 8003874:	40007000 	.word	0x40007000
 8003878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x4ec>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d028      	beq.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d121      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d11a      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0cc      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d90c      	bls.n	800392c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b8      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003944:	4b59      	ldr	r3, [pc, #356]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a58      	ldr	r2, [pc, #352]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a52      	ldr	r2, [pc, #328]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	494d      	ldr	r1, [pc, #308]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d044      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e07f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e067      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7fe fa02 	bl	8001de8 <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fe f9fe 	bl	8001de8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20c      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e032      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4916      	ldr	r1, [pc, #88]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	490e      	ldr	r1, [pc, #56]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a76:	f000 f821 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	5ccb      	ldrb	r3, [r1, r3]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe f962 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023c00 	.word	0x40023c00
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	08005f9c 	.word	0x08005f9c
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b090      	sub	sp, #64	; 0x40
 8003ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	2300      	movs	r3, #0
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003acc:	2300      	movs	r3, #0
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad4:	4b59      	ldr	r3, [pc, #356]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d00d      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x40>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	f200 80a1 	bhi.w	8003c28 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aee:	e09b      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003af4:	e09b      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af6:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003afa:	e098      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b06:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d028      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b24:	2100      	movs	r1, #0
 8003b26:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b28:	fb03 f201 	mul.w	r2, r3, r1
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	fb00 f303 	mul.w	r3, r0, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	4a43      	ldr	r2, [pc, #268]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b36:	fba0 1202 	umull	r1, r2, r0, r2
 8003b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	4413      	add	r3, r2
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	2200      	movs	r2, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	61fa      	str	r2, [r7, #28]
 8003b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b56:	f7fc fe6d 	bl	8000834 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b62:	e053      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b64:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	617a      	str	r2, [r7, #20]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b76:	f04f 0b00 	mov.w	fp, #0
 8003b7a:	4652      	mov	r2, sl
 8003b7c:	465b      	mov	r3, fp
 8003b7e:	f04f 0000 	mov.w	r0, #0
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	0159      	lsls	r1, r3, #5
 8003b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8c:	0150      	lsls	r0, r2, #5
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	ebb2 080a 	subs.w	r8, r2, sl
 8003b96:	eb63 090b 	sbc.w	r9, r3, fp
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ba6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003baa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bae:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb2:	eb63 0509 	sbc.w	r5, r3, r9
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	00eb      	lsls	r3, r5, #3
 8003bc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc4:	00e2      	lsls	r2, r4, #3
 8003bc6:	4614      	mov	r4, r2
 8003bc8:	461d      	mov	r5, r3
 8003bca:	eb14 030a 	adds.w	r3, r4, sl
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	eb45 030b 	adc.w	r3, r5, fp
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be2:	4629      	mov	r1, r5
 8003be4:	028b      	lsls	r3, r1, #10
 8003be6:	4621      	mov	r1, r4
 8003be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bec:	4621      	mov	r1, r4
 8003bee:	028a      	lsls	r2, r1, #10
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	60fa      	str	r2, [r7, #12]
 8003bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c00:	f7fc fe18 	bl	8000834 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	3301      	adds	r3, #1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3740      	adds	r7, #64	; 0x40
 8003c34:	46bd      	mov	sp, r7
 8003c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	017d7840 	.word	0x017d7840

08003c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c4c:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000000 	.word	0x20000000

08003c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c64:	f7ff fff0 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0a9b      	lsrs	r3, r3, #10
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	08005fac 	.word	0x08005fac

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	f7ff ffdc 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0b5b      	lsrs	r3, r3, #13
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	08005fac 	.word	0x08005fac

08003cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e041      	b.n	8003d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fe66 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 fc7a 	bl	80045e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d001      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e04e      	b.n	8003e06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a23      	ldr	r2, [pc, #140]	; (8003e14 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d022      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x80>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d01d      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x80>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d018      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x80>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <HAL_TIM_Base_Start_IT+0xcc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x80>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <HAL_TIM_Base_Start_IT+0xd4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d111      	bne.n	8003df4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d010      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	e007      	b.n	8003e04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40000c00 	.word	0x40000c00
 8003e24:	40010400 	.word	0x40010400
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40001800 	.word	0x40001800

08003e30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e041      	b.n	8003ec6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f839 	bl	8003ece <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f000 fbba 	bl	80045e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_PWM_Start+0x24>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e022      	b.n	8003f4e <HAL_TIM_PWM_Start+0x6a>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d109      	bne.n	8003f22 <HAL_TIM_PWM_Start+0x3e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	bf14      	ite	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	2300      	moveq	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e015      	b.n	8003f4e <HAL_TIM_PWM_Start+0x6a>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d109      	bne.n	8003f3c <HAL_TIM_PWM_Start+0x58>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e008      	b.n	8003f4e <HAL_TIM_PWM_Start+0x6a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07c      	b.n	8004050 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x82>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	e013      	b.n	8003f8e <HAL_TIM_PWM_Start+0xaa>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start+0x92>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f74:	e00b      	b.n	8003f8e <HAL_TIM_PWM_Start+0xaa>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f84:	e003      	b.n	8003f8e <HAL_TIM_PWM_Start+0xaa>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2201      	movs	r2, #1
 8003f94:	6839      	ldr	r1, [r7, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fe10 	bl	8004bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <HAL_TIM_PWM_Start+0x174>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_TIM_PWM_Start+0xcc>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2c      	ldr	r2, [pc, #176]	; (800405c <HAL_TIM_PWM_Start+0x178>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIM_PWM_Start+0xd0>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_TIM_PWM_Start+0xd2>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a22      	ldr	r2, [pc, #136]	; (8004058 <HAL_TIM_PWM_Start+0x174>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_TIM_PWM_Start+0x136>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d01d      	beq.n	800401a <HAL_TIM_PWM_Start+0x136>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_TIM_PWM_Start+0x17c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_TIM_PWM_Start+0x136>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <HAL_TIM_PWM_Start+0x180>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_TIM_PWM_Start+0x136>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_TIM_PWM_Start+0x184>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIM_PWM_Start+0x136>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_TIM_PWM_Start+0x178>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_TIM_PWM_Start+0x136>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <HAL_TIM_PWM_Start+0x188>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIM_PWM_Start+0x136>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a16      	ldr	r2, [pc, #88]	; (8004070 <HAL_TIM_PWM_Start+0x18c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d111      	bne.n	800403e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b06      	cmp	r3, #6
 800402a:	d010      	beq.n	800404e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	e007      	b.n	800404e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40010000 	.word	0x40010000
 800405c:	40010400 	.word	0x40010400
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000
 8004070:	40001800 	.word	0x40001800

08004074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b02      	cmp	r3, #2
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0202 	mvn.w	r2, #2
 80040a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa77 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa69 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa7a 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d122      	bne.n	8004124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d11b      	bne.n	8004124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0204 	mvn.w	r2, #4
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa4d 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa3f 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fa50 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b08      	cmp	r3, #8
 8004130:	d122      	bne.n	8004178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b08      	cmp	r3, #8
 800413e:	d11b      	bne.n	8004178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0208 	mvn.w	r2, #8
 8004148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2204      	movs	r2, #4
 800414e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fa23 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa15 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fa26 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b10      	cmp	r3, #16
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b10      	cmp	r3, #16
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f9f9 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9eb 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f9fc 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0201 	mvn.w	r2, #1
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fc fca0 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fd78 	bl	8004d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f9c1 	bl	80045d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b20      	cmp	r3, #32
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b20      	cmp	r3, #32
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0220 	mvn.w	r2, #32
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fd42 	bl	8004d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0ae      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	f200 809f 	bhi.w	80043f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042ed 	.word	0x080042ed
 80042bc:	080043f1 	.word	0x080043f1
 80042c0:	080043f1 	.word	0x080043f1
 80042c4:	080043f1 	.word	0x080043f1
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	080043f1 	.word	0x080043f1
 80042d0:	080043f1 	.word	0x080043f1
 80042d4:	080043f1 	.word	0x080043f1
 80042d8:	0800436f 	.word	0x0800436f
 80042dc:	080043f1 	.word	0x080043f1
 80042e0:	080043f1 	.word	0x080043f1
 80042e4:	080043f1 	.word	0x080043f1
 80042e8:	080043af 	.word	0x080043af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fa18 	bl	8004728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0208 	orr.w	r2, r2, #8
 8004306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6999      	ldr	r1, [r3, #24]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	619a      	str	r2, [r3, #24]
      break;
 800432a:	e064      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fa68 	bl	8004808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6999      	ldr	r1, [r3, #24]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	619a      	str	r2, [r3, #24]
      break;
 800436c:	e043      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fabd 	bl	80048f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0208 	orr.w	r2, r2, #8
 8004388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0204 	bic.w	r2, r2, #4
 8004398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	61da      	str	r2, [r3, #28]
      break;
 80043ac:	e023      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fb11 	bl	80049dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69d9      	ldr	r1, [r3, #28]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	021a      	lsls	r2, r3, #8
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	61da      	str	r2, [r3, #28]
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIM_ConfigClockSource+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e0b4      	b.n	800458e <HAL_TIM_ConfigClockSource+0x186>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445c:	d03e      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0xd4>
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004462:	f200 8087 	bhi.w	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	f000 8086 	beq.w	800457a <HAL_TIM_ConfigClockSource+0x172>
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	d87f      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b70      	cmp	r3, #112	; 0x70
 8004476:	d01a      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0xa6>
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d87b      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b60      	cmp	r3, #96	; 0x60
 800447e:	d050      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x11a>
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d877      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b50      	cmp	r3, #80	; 0x50
 8004486:	d03c      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0xfa>
 8004488:	2b50      	cmp	r3, #80	; 0x50
 800448a:	d873      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d058      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x13a>
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d86f      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b30      	cmp	r3, #48	; 0x30
 8004496:	d064      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 8004498:	2b30      	cmp	r3, #48	; 0x30
 800449a:	d86b      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b20      	cmp	r3, #32
 800449e:	d060      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d867      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d05c      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d05a      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	e062      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f000 fb5d 	bl	8004b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	609a      	str	r2, [r3, #8]
      break;
 80044da:	e04f      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f000 fb46 	bl	8004b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fe:	609a      	str	r2, [r3, #8]
      break;
 8004500:	e03c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	461a      	mov	r2, r3
 8004510:	f000 faba 	bl	8004a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2150      	movs	r1, #80	; 0x50
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb13 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 8004520:	e02c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f000 fad9 	bl	8004ae6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2160      	movs	r1, #96	; 0x60
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fb03 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 8004540:	e01c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	461a      	mov	r2, r3
 8004550:	f000 fa9a 	bl	8004a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2140      	movs	r1, #64	; 0x40
 800455a:	4618      	mov	r0, r3
 800455c:	f000 faf3 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 8004560:	e00c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f000 faea 	bl	8004b46 <TIM_ITRx_SetConfig>
      break;
 8004572:	e003      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e000      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800457a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a40      	ldr	r2, [pc, #256]	; (80046fc <TIM_Base_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d00f      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a3d      	ldr	r2, [pc, #244]	; (8004700 <TIM_Base_SetConfig+0x118>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a3c      	ldr	r2, [pc, #240]	; (8004704 <TIM_Base_SetConfig+0x11c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a3b      	ldr	r2, [pc, #236]	; (8004708 <TIM_Base_SetConfig+0x120>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3a      	ldr	r2, [pc, #232]	; (800470c <TIM_Base_SetConfig+0x124>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d108      	bne.n	800463a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2f      	ldr	r2, [pc, #188]	; (80046fc <TIM_Base_SetConfig+0x114>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004648:	d027      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2c      	ldr	r2, [pc, #176]	; (8004700 <TIM_Base_SetConfig+0x118>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d023      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <TIM_Base_SetConfig+0x11c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <TIM_Base_SetConfig+0x120>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a29      	ldr	r2, [pc, #164]	; (800470c <TIM_Base_SetConfig+0x124>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d017      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a28      	ldr	r2, [pc, #160]	; (8004710 <TIM_Base_SetConfig+0x128>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a27      	ldr	r2, [pc, #156]	; (8004714 <TIM_Base_SetConfig+0x12c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a26      	ldr	r2, [pc, #152]	; (8004718 <TIM_Base_SetConfig+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a25      	ldr	r2, [pc, #148]	; (800471c <TIM_Base_SetConfig+0x134>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a24      	ldr	r2, [pc, #144]	; (8004720 <TIM_Base_SetConfig+0x138>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a23      	ldr	r2, [pc, #140]	; (8004724 <TIM_Base_SetConfig+0x13c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0xf8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0c      	ldr	r2, [pc, #48]	; (800470c <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d103      	bne.n	80046e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	615a      	str	r2, [r3, #20]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	40010400 	.word	0x40010400
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800
 800471c:	40001800 	.word	0x40001800
 8004720:	40001c00 	.word	0x40001c00
 8004724:	40002000 	.word	0x40002000

08004728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 0302 	bic.w	r3, r3, #2
 8004770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a20      	ldr	r2, [pc, #128]	; (8004800 <TIM_OC1_SetConfig+0xd8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <TIM_OC1_SetConfig+0x64>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <TIM_OC1_SetConfig+0xdc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10c      	bne.n	80047a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0308 	bic.w	r3, r3, #8
 8004792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <TIM_OC1_SetConfig+0xd8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_OC1_SetConfig+0x8e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <TIM_OC1_SetConfig+0xdc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d111      	bne.n	80047da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40010000 	.word	0x40010000
 8004804:	40010400 	.word	0x40010400

08004808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0210 	bic.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0320 	bic.w	r3, r3, #32
 8004852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a22      	ldr	r2, [pc, #136]	; (80048ec <TIM_OC2_SetConfig+0xe4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_OC2_SetConfig+0x68>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a21      	ldr	r2, [pc, #132]	; (80048f0 <TIM_OC2_SetConfig+0xe8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10d      	bne.n	800488c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <TIM_OC2_SetConfig+0xe4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC2_SetConfig+0x94>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <TIM_OC2_SetConfig+0xe8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d113      	bne.n	80048c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40010000 	.word	0x40010000
 80048f0:	40010400 	.word	0x40010400

080048f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800493c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <TIM_OC3_SetConfig+0xe0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_OC3_SetConfig+0x66>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <TIM_OC3_SetConfig+0xe4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10d      	bne.n	8004976 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <TIM_OC3_SetConfig+0xe0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC3_SetConfig+0x92>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <TIM_OC3_SetConfig+0xe4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d113      	bne.n	80049ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800498c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40010400 	.word	0x40010400

080049dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	031b      	lsls	r3, r3, #12
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <TIM_OC4_SetConfig+0xa4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_OC4_SetConfig+0x68>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <TIM_OC4_SetConfig+0xa8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d109      	bne.n	8004a58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	019b      	lsls	r3, r3, #6
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400

08004a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 030a 	bic.w	r3, r3, #10
 8004ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b087      	sub	sp, #28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f023 0210 	bic.w	r2, r3, #16
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f043 0307 	orr.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2201      	movs	r2, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	401a      	ands	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e05a      	b.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6c:	d01d      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40010400 	.word	0x40010400
 8004cf8:	40014000 	.word	0x40014000
 8004cfc:	40001800 	.word	0x40001800

08004d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e03f      	b.n	8004dba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc fea2 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2224      	movs	r2, #36	; 0x24
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fe69 	bl	8005a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695a      	ldr	r2, [r3, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d11d      	bne.n	8004e18 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_UART_Receive_DMA+0x26>
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e016      	b.n	8004e1a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_UART_Receive_DMA+0x38>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e00f      	b.n	8004e1a <HAL_UART_Receive_DMA+0x58>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fbb8 	bl	8005584 <UART_Start_Receive_DMA>
 8004e14:	4603      	mov	r3, r0
 8004e16:	e000      	b.n	8004e1a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b0ba      	sub	sp, #232	; 0xe8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_UART_IRQHandler+0x66>
 8004e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fd23 	bl	80058ce <UART_Receive_IT>
      return;
 8004e88:	e256      	b.n	8005338 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 80de 	beq.w	8005050 <HAL_UART_IRQHandler+0x22c>
 8004e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80d1 	beq.w	8005050 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xae>
 8004eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xd2>
 8004ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f043 0202 	orr.w	r2, r3, #2
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_UART_IRQHandler+0xf6>
 8004f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f043 0204 	orr.w	r2, r3, #4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d011      	beq.n	8004f4a <HAL_UART_IRQHandler+0x126>
 8004f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0208 	orr.w	r2, r3, #8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 81ed 	beq.w	800532e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <HAL_UART_IRQHandler+0x14e>
 8004f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fcae 	bl	80058ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <HAL_UART_IRQHandler+0x17a>
 8004f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d04f      	beq.n	800503e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fbb6 	bl	8005710 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d141      	bne.n	8005036 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1d9      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	2b00      	cmp	r3, #0
 8005004:	d013      	beq.n	800502e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	4a7d      	ldr	r2, [pc, #500]	; (8005200 <HAL_UART_IRQHandler+0x3dc>)
 800500c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	4618      	mov	r0, r3
 8005014:	f7fd fdb2 	bl	8002b7c <HAL_DMA_Abort_IT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	e00e      	b.n	800504c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f99a 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	e00a      	b.n	800504c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f996 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	e006      	b.n	800504c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f992 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800504a:	e170      	b.n	800532e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	bf00      	nop
    return;
 800504e:	e16e      	b.n	800532e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 814a 	bne.w	80052ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8143 	beq.w	80052ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 813c 	beq.w	80052ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	f040 80b4 	bne.w	8005204 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8140 	beq.w	8005332 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ba:	429a      	cmp	r2, r3
 80050bc:	f080 8139 	bcs.w	8005332 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d2:	f000 8088 	beq.w	80051e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800510e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800511a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1d9      	bne.n	80050d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3314      	adds	r3, #20
 8005128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3314      	adds	r3, #20
 8005142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005146:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800514a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800514e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e1      	bne.n	8005122 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800516e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005182:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005184:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e3      	bne.n	800515e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b6:	f023 0310 	bic.w	r3, r3, #16
 80051ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80051ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e3      	bne.n	80051a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd fc5b 	bl	8002a9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f8c0 	bl	800537c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051fc:	e099      	b.n	8005332 <HAL_UART_IRQHandler+0x50e>
 80051fe:	bf00      	nop
 8005200:	080057d7 	.word	0x080057d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800520c:	b29b      	uxth	r3, r3
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 808b 	beq.w	8005336 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8086 	beq.w	8005336 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800523a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800524e:	647a      	str	r2, [r7, #68]	; 0x44
 8005250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800525c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e3      	bne.n	800522a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3314      	adds	r3, #20
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	623b      	str	r3, [r7, #32]
   return(result);
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3314      	adds	r3, #20
 8005282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005286:	633a      	str	r2, [r7, #48]	; 0x30
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800528c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e3      	bne.n	8005262 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0310 	bic.w	r3, r3, #16
 80052be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052cc:	61fa      	str	r2, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	69b9      	ldr	r1, [r7, #24]
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	617b      	str	r3, [r7, #20]
   return(result);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e3      	bne.n	80052a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f848 	bl	800537c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ec:	e023      	b.n	8005336 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <HAL_UART_IRQHandler+0x4ea>
 80052fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa79 	bl	80057fe <UART_Transmit_IT>
    return;
 800530c:	e014      	b.n	8005338 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00e      	beq.n	8005338 <HAL_UART_IRQHandler+0x514>
 800531a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fab9 	bl	800589e <UART_EndTransmit_IT>
    return;
 800532c:	e004      	b.n	8005338 <HAL_UART_IRQHandler+0x514>
    return;
 800532e:	bf00      	nop
 8005330:	e002      	b.n	8005338 <HAL_UART_IRQHandler+0x514>
      return;
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <HAL_UART_IRQHandler+0x514>
      return;
 8005336:	bf00      	nop
  }
}
 8005338:	37e8      	adds	r7, #232	; 0xe8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop

08005340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b09c      	sub	sp, #112	; 0x70
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d172      	bne.n	8005496 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80053b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b2:	2200      	movs	r2, #0
 80053b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80053d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e5      	bne.n	80053b6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	667b      	str	r3, [r7, #100]	; 0x64
 8005402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3314      	adds	r3, #20
 8005408:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800540a:	647a      	str	r2, [r7, #68]	; 0x44
 800540c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	623b      	str	r3, [r7, #32]
   return(result);
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005434:	663b      	str	r3, [r7, #96]	; 0x60
 8005436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800543e:	633a      	str	r2, [r7, #48]	; 0x30
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	2b01      	cmp	r3, #1
 8005460:	d119      	bne.n	8005496 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	330c      	adds	r3, #12
 8005468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	60fb      	str	r3, [r7, #12]
   return(result);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f023 0310 	bic.w	r3, r3, #16
 8005478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800547a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005482:	61fa      	str	r2, [r7, #28]
 8005484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	617b      	str	r3, [r7, #20]
   return(result);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e5      	bne.n	8005462 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	2b01      	cmp	r3, #1
 800549c:	d106      	bne.n	80054ac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054a2:	4619      	mov	r1, r3
 80054a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054a6:	f7ff ff69 	bl	800537c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054aa:	e002      	b.n	80054b2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80054ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054ae:	f7fb fc17 	bl	8000ce0 <HAL_UART_RxCpltCallback>
}
 80054b2:	bf00      	nop
 80054b4:	3770      	adds	r7, #112	; 0x70
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d108      	bne.n	80054e2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4619      	mov	r1, r3
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7ff ff4e 	bl	800537c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054e0:	e002      	b.n	80054e8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff36 	bl	8005354 <HAL_UART_RxHalfCpltCallback>
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b21      	cmp	r3, #33	; 0x21
 8005522:	d108      	bne.n	8005536 <UART_DMAError+0x46>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005530:	68b8      	ldr	r0, [r7, #8]
 8005532:	f000 f8c5 	bl	80056c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b22      	cmp	r3, #34	; 0x22
 8005556:	d108      	bne.n	800556a <UART_DMAError+0x7a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005564:	68b8      	ldr	r0, [r7, #8]
 8005566:	f000 f8d3 	bl	8005710 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0210 	orr.w	r2, r3, #16
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005576:	68b8      	ldr	r0, [r7, #8]
 8005578:	f7ff fef6 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b098      	sub	sp, #96	; 0x60
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2222      	movs	r2, #34	; 0x22
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	4a40      	ldr	r2, [pc, #256]	; (80056b4 <UART_Start_Receive_DMA+0x130>)
 80055b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	4a3f      	ldr	r2, [pc, #252]	; (80056b8 <UART_Start_Receive_DMA+0x134>)
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	4a3e      	ldr	r2, [pc, #248]	; (80056bc <UART_Start_Receive_DMA+0x138>)
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	2200      	movs	r2, #0
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80055cc:	f107 0308 	add.w	r3, r7, #8
 80055d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	f7fd fa02 	bl	80029ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d019      	beq.n	8005642 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800561e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005624:	65bb      	str	r3, [r7, #88]	; 0x58
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800562e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005630:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800563c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3314      	adds	r3, #20
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	657b      	str	r3, [r7, #84]	; 0x54
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005662:	63ba      	str	r2, [r7, #56]	; 0x38
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e5      	bne.n	8005642 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	617b      	str	r3, [r7, #20]
   return(result);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800568c:	653b      	str	r3, [r7, #80]	; 0x50
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3314      	adds	r3, #20
 8005694:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005696:	627a      	str	r2, [r7, #36]	; 0x24
 8005698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6a39      	ldr	r1, [r7, #32]
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3760      	adds	r7, #96	; 0x60
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	08005395 	.word	0x08005395
 80056b8:	080054bb 	.word	0x080054bb
 80056bc:	080054f1 	.word	0x080054f1

080056c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b089      	sub	sp, #36	; 0x24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	61ba      	str	r2, [r7, #24]
 80056ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6979      	ldr	r1, [r7, #20]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	613b      	str	r3, [r7, #16]
   return(result);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005704:	bf00      	nop
 8005706:	3724      	adds	r7, #36	; 0x24
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b095      	sub	sp, #84	; 0x54
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005738:	643a      	str	r2, [r7, #64]	; 0x40
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800573e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e5      	bne.n	8005718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3314      	adds	r3, #20
 8005752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	61fb      	str	r3, [r7, #28]
   return(result);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	64bb      	str	r3, [r7, #72]	; 0x48
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3314      	adds	r3, #20
 800576a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800576c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	2b01      	cmp	r3, #1
 8005786:	d119      	bne.n	80057bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	60bb      	str	r3, [r7, #8]
   return(result);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f023 0310 	bic.w	r3, r3, #16
 800579e:	647b      	str	r3, [r7, #68]	; 0x44
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057a8:	61ba      	str	r2, [r7, #24]
 80057aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6979      	ldr	r1, [r7, #20]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	613b      	str	r3, [r7, #16]
   return(result);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057ca:	bf00      	nop
 80057cc:	3754      	adds	r7, #84	; 0x54
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff fdb9 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b21      	cmp	r3, #33	; 0x21
 8005810:	d13e      	bne.n	8005890 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	d114      	bne.n	8005846 <UART_Transmit_IT+0x48>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d110      	bne.n	8005846 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005838:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	1c9a      	adds	r2, r3, #2
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]
 8005844:	e008      	b.n	8005858 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6211      	str	r1, [r2, #32]
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4619      	mov	r1, r3
 8005866:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10f      	bne.n	800588c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800587a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800588a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fd3e 	bl	8005340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b08c      	sub	sp, #48	; 0x30
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b22      	cmp	r3, #34	; 0x22
 80058e0:	f040 80ab 	bne.w	8005a3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d117      	bne.n	800591e <UART_Receive_IT+0x50>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d113      	bne.n	800591e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590c:	b29a      	uxth	r2, r3
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	1c9a      	adds	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
 800591c:	e026      	b.n	800596c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005924:	2300      	movs	r3, #0
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005930:	d007      	beq.n	8005942 <UART_Receive_IT+0x74>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <UART_Receive_IT+0x82>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	e008      	b.n	8005962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29b      	uxth	r3, r3
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4619      	mov	r1, r3
 800597a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800597c:	2b00      	cmp	r3, #0
 800597e:	d15a      	bne.n	8005a36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0220 	bic.w	r2, r2, #32
 800598e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800599e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d135      	bne.n	8005a2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	613b      	str	r3, [r7, #16]
   return(result);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f023 0310 	bic.w	r3, r3, #16
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e6:	623a      	str	r2, [r7, #32]
 80059e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	69f9      	ldr	r1, [r7, #28]
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e5      	bne.n	80059c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d10a      	bne.n	8005a1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fca9 	bl	800537c <HAL_UARTEx_RxEventCallback>
 8005a2a:	e002      	b.n	8005a32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7fb f957 	bl	8000ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e002      	b.n	8005a3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3730      	adds	r7, #48	; 0x30
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a48:	b0c0      	sub	sp, #256	; 0x100
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	68d9      	ldr	r1, [r3, #12]
 8005a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	ea40 0301 	orr.w	r3, r0, r1
 8005a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a9c:	f021 010c 	bic.w	r1, r1, #12
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abe:	6999      	ldr	r1, [r3, #24]
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	ea40 0301 	orr.w	r3, r0, r1
 8005aca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b8f      	ldr	r3, [pc, #572]	; (8005d10 <UART_SetConfig+0x2cc>)
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d005      	beq.n	8005ae4 <UART_SetConfig+0xa0>
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b8d      	ldr	r3, [pc, #564]	; (8005d14 <UART_SetConfig+0x2d0>)
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d104      	bne.n	8005aee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ae4:	f7fe f8d0 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8005ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005aec:	e003      	b.n	8005af6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aee:	f7fe f8b7 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8005af2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b00:	f040 810c 	bne.w	8005d1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b16:	4622      	mov	r2, r4
 8005b18:	462b      	mov	r3, r5
 8005b1a:	1891      	adds	r1, r2, r2
 8005b1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b1e:	415b      	adcs	r3, r3
 8005b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b26:	4621      	mov	r1, r4
 8005b28:	eb12 0801 	adds.w	r8, r2, r1
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	eb43 0901 	adc.w	r9, r3, r1
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b46:	4690      	mov	r8, r2
 8005b48:	4699      	mov	r9, r3
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	eb18 0303 	adds.w	r3, r8, r3
 8005b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b54:	462b      	mov	r3, r5
 8005b56:	eb49 0303 	adc.w	r3, r9, r3
 8005b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b72:	460b      	mov	r3, r1
 8005b74:	18db      	adds	r3, r3, r3
 8005b76:	653b      	str	r3, [r7, #80]	; 0x50
 8005b78:	4613      	mov	r3, r2
 8005b7a:	eb42 0303 	adc.w	r3, r2, r3
 8005b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b88:	f7fa fe54 	bl	8000834 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4b61      	ldr	r3, [pc, #388]	; (8005d18 <UART_SetConfig+0x2d4>)
 8005b92:	fba3 2302 	umull	r2, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	011c      	lsls	r4, r3, #4
 8005b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ba4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bac:	4642      	mov	r2, r8
 8005bae:	464b      	mov	r3, r9
 8005bb0:	1891      	adds	r1, r2, r2
 8005bb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bb4:	415b      	adcs	r3, r3
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bdc:	4692      	mov	sl, r2
 8005bde:	469b      	mov	fp, r3
 8005be0:	4643      	mov	r3, r8
 8005be2:	eb1a 0303 	adds.w	r3, sl, r3
 8005be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bea:	464b      	mov	r3, r9
 8005bec:	eb4b 0303 	adc.w	r3, fp, r3
 8005bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	18db      	adds	r3, r3, r3
 8005c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c0e:	4613      	mov	r3, r2
 8005c10:	eb42 0303 	adc.w	r3, r2, r3
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
 8005c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c1e:	f7fa fe09 	bl	8000834 <__aeabi_uldivmod>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	4b3b      	ldr	r3, [pc, #236]	; (8005d18 <UART_SetConfig+0x2d4>)
 8005c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2264      	movs	r2, #100	; 0x64
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
 8005c36:	1acb      	subs	r3, r1, r3
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c3e:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <UART_SetConfig+0x2d4>)
 8005c40:	fba3 2302 	umull	r2, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c4c:	441c      	add	r4, r3
 8005c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	1891      	adds	r1, r2, r2
 8005c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c68:	415b      	adcs	r3, r3
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c70:	4641      	mov	r1, r8
 8005c72:	1851      	adds	r1, r2, r1
 8005c74:	6339      	str	r1, [r7, #48]	; 0x30
 8005c76:	4649      	mov	r1, r9
 8005c78:	414b      	adcs	r3, r1
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c88:	4659      	mov	r1, fp
 8005c8a:	00cb      	lsls	r3, r1, #3
 8005c8c:	4651      	mov	r1, sl
 8005c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c92:	4651      	mov	r1, sl
 8005c94:	00ca      	lsls	r2, r1, #3
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	189b      	adds	r3, r3, r2
 8005ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	460a      	mov	r2, r1
 8005ca8:	eb42 0303 	adc.w	r3, r2, r3
 8005cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	18db      	adds	r3, r3, r3
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cca:	4613      	mov	r3, r2
 8005ccc:	eb42 0303 	adc.w	r3, r2, r3
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cda:	f7fa fdab 	bl	8000834 <__aeabi_uldivmod>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <UART_SetConfig+0x2d4>)
 8005ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	2164      	movs	r1, #100	; 0x64
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	3332      	adds	r3, #50	; 0x32
 8005cf6:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <UART_SetConfig+0x2d4>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	f003 0207 	and.w	r2, r3, #7
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4422      	add	r2, r4
 8005d0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d0c:	e105      	b.n	8005f1a <UART_SetConfig+0x4d6>
 8005d0e:	bf00      	nop
 8005d10:	40011000 	.word	0x40011000
 8005d14:	40011400 	.word	0x40011400
 8005d18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d2e:	4642      	mov	r2, r8
 8005d30:	464b      	mov	r3, r9
 8005d32:	1891      	adds	r1, r2, r2
 8005d34:	6239      	str	r1, [r7, #32]
 8005d36:	415b      	adcs	r3, r3
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d3e:	4641      	mov	r1, r8
 8005d40:	1854      	adds	r4, r2, r1
 8005d42:	4649      	mov	r1, r9
 8005d44:	eb43 0501 	adc.w	r5, r3, r1
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	00eb      	lsls	r3, r5, #3
 8005d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d56:	00e2      	lsls	r2, r4, #3
 8005d58:	4614      	mov	r4, r2
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	4643      	mov	r3, r8
 8005d5e:	18e3      	adds	r3, r4, r3
 8005d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d64:	464b      	mov	r3, r9
 8005d66:	eb45 0303 	adc.w	r3, r5, r3
 8005d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	008b      	lsls	r3, r1, #2
 8005d8e:	4621      	mov	r1, r4
 8005d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d94:	4621      	mov	r1, r4
 8005d96:	008a      	lsls	r2, r1, #2
 8005d98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d9c:	f7fa fd4a 	bl	8000834 <__aeabi_uldivmod>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4b60      	ldr	r3, [pc, #384]	; (8005f28 <UART_SetConfig+0x4e4>)
 8005da6:	fba3 2302 	umull	r2, r3, r3, r2
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	011c      	lsls	r4, r3, #4
 8005dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	1891      	adds	r1, r2, r2
 8005dc6:	61b9      	str	r1, [r7, #24]
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	1851      	adds	r1, r2, r1
 8005dd4:	6139      	str	r1, [r7, #16]
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	414b      	adcs	r3, r1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005de8:	4659      	mov	r1, fp
 8005dea:	00cb      	lsls	r3, r1, #3
 8005dec:	4651      	mov	r1, sl
 8005dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df2:	4651      	mov	r1, sl
 8005df4:	00ca      	lsls	r2, r1, #3
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	189b      	adds	r3, r3, r2
 8005e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e04:	464b      	mov	r3, r9
 8005e06:	460a      	mov	r2, r1
 8005e08:	eb42 0303 	adc.w	r3, r2, r3
 8005e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e28:	4649      	mov	r1, r9
 8005e2a:	008b      	lsls	r3, r1, #2
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e32:	4641      	mov	r1, r8
 8005e34:	008a      	lsls	r2, r1, #2
 8005e36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e3a:	f7fa fcfb 	bl	8000834 <__aeabi_uldivmod>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <UART_SetConfig+0x4e4>)
 8005e44:	fba3 1302 	umull	r1, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	2164      	movs	r1, #100	; 0x64
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	3332      	adds	r3, #50	; 0x32
 8005e56:	4a34      	ldr	r2, [pc, #208]	; (8005f28 <UART_SetConfig+0x4e4>)
 8005e58:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e62:	441c      	add	r4, r3
 8005e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e68:	2200      	movs	r2, #0
 8005e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e6c:	677a      	str	r2, [r7, #116]	; 0x74
 8005e6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e72:	4642      	mov	r2, r8
 8005e74:	464b      	mov	r3, r9
 8005e76:	1891      	adds	r1, r2, r2
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	415b      	adcs	r3, r3
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e82:	4641      	mov	r1, r8
 8005e84:	1851      	adds	r1, r2, r1
 8005e86:	6039      	str	r1, [r7, #0]
 8005e88:	4649      	mov	r1, r9
 8005e8a:	414b      	adcs	r3, r1
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	00cb      	lsls	r3, r1, #3
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	00ca      	lsls	r2, r1, #3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4603      	mov	r3, r0
 8005eae:	4642      	mov	r2, r8
 8005eb0:	189b      	adds	r3, r3, r2
 8005eb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	eb42 0303 	adc.w	r3, r2, r3
 8005ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec8:	667a      	str	r2, [r7, #100]	; 0x64
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	008b      	lsls	r3, r1, #2
 8005eda:	4641      	mov	r1, r8
 8005edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	008a      	lsls	r2, r1, #2
 8005ee4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ee8:	f7fa fca4 	bl	8000834 <__aeabi_uldivmod>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <UART_SetConfig+0x4e4>)
 8005ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2164      	movs	r1, #100	; 0x64
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	3332      	adds	r3, #50	; 0x32
 8005f04:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <UART_SetConfig+0x4e4>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4422      	add	r2, r4
 8005f18:	609a      	str	r2, [r3, #8]
}
 8005f1a:	bf00      	nop
 8005f1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f20:	46bd      	mov	sp, r7
 8005f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f26:	bf00      	nop
 8005f28:	51eb851f 	.word	0x51eb851f

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4d0d      	ldr	r5, [pc, #52]	; (8005f64 <__libc_init_array+0x38>)
 8005f30:	4c0d      	ldr	r4, [pc, #52]	; (8005f68 <__libc_init_array+0x3c>)
 8005f32:	1b64      	subs	r4, r4, r5
 8005f34:	10a4      	asrs	r4, r4, #2
 8005f36:	2600      	movs	r6, #0
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	4d0b      	ldr	r5, [pc, #44]	; (8005f6c <__libc_init_array+0x40>)
 8005f3e:	4c0c      	ldr	r4, [pc, #48]	; (8005f70 <__libc_init_array+0x44>)
 8005f40:	f000 f820 	bl	8005f84 <_init>
 8005f44:	1b64      	subs	r4, r4, r5
 8005f46:	10a4      	asrs	r4, r4, #2
 8005f48:	2600      	movs	r6, #0
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	08005fc4 	.word	0x08005fc4
 8005f68:	08005fc4 	.word	0x08005fc4
 8005f6c:	08005fc4 	.word	0x08005fc4
 8005f70:	08005fc8 	.word	0x08005fc8

08005f74 <memset>:
 8005f74:	4402      	add	r2, r0
 8005f76:	4603      	mov	r3, r0
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d100      	bne.n	8005f7e <memset+0xa>
 8005f7c:	4770      	bx	lr
 8005f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f82:	e7f9      	b.n	8005f78 <memset+0x4>

08005f84 <_init>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr

08005f90 <_fini>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr
