
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005888  08005888  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005890  08005890  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000220  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e22  00000000  00000000  0002f121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00030f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  00031cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002236d  00000000  00000000  00032980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4e3  00000000  00000000  00054ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d78fa  00000000  00000000  000641d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013baca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003908  00000000  00000000  0013bb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005850 	.word	0x08005850

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005850 	.word	0x08005850

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
//		  motor_state_selector(MOTOR_HALT);
//	  }
//
//  }

}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	4b60      	ldr	r3, [pc, #384]	; (800066c <HAL_UART_RxCpltCallback+0x18c>)
 80004ea:	881a      	ldrh	r2, [r3, #0]
  memcpy(dma_tx_buffer, dma_rx_buffer, BUFFER_SIZE);
 80004ec:	4b60      	ldr	r3, [pc, #384]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 80004ee:	801a      	strh	r2, [r3, #0]
  if (global_status == 1)
 80004f0:	4b60      	ldr	r3, [pc, #384]	; (8000674 <HAL_UART_RxCpltCallback+0x194>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	f040 80af 	bne.w	8000658 <HAL_UART_RxCpltCallback+0x178>
  {
	  //Check for Stepper motor command
	  if(dma_tx_buffer[0] == 'R')
 80004fa:	4b5d      	ldr	r3, [pc, #372]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b52      	cmp	r3, #82	; 0x52
 8000500:	d10c      	bne.n	800051c <HAL_UART_RxCpltCallback+0x3c>
	  {
		  direction = 1;
 8000502:	4b5d      	ldr	r3, [pc, #372]	; (8000678 <HAL_UART_RxCpltCallback+0x198>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
		  degree = 10.0;
 8000508:	4b5c      	ldr	r3, [pc, #368]	; (800067c <HAL_UART_RxCpltCallback+0x19c>)
 800050a:	4a5d      	ldr	r2, [pc, #372]	; (8000680 <HAL_UART_RxCpltCallback+0x1a0>)
 800050c:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 800050e:	4b5d      	ldr	r3, [pc, #372]	; (8000684 <HAL_UART_RxCpltCallback+0x1a4>)
 8000510:	2200      	movs	r2, #0
 8000512:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000514:	4b5c      	ldr	r3, [pc, #368]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 8000516:	2200      	movs	r2, #0
 8000518:	801a      	strh	r2, [r3, #0]
 800051a:	e069      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
	  }
	  else if(dma_tx_buffer[0] == 'r')
 800051c:	4b54      	ldr	r3, [pc, #336]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b72      	cmp	r3, #114	; 0x72
 8000522:	d10c      	bne.n	800053e <HAL_UART_RxCpltCallback+0x5e>
	  {
		  direction = 1;
 8000524:	4b54      	ldr	r3, [pc, #336]	; (8000678 <HAL_UART_RxCpltCallback+0x198>)
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
		  degree = 5.0;
 800052a:	4b54      	ldr	r3, [pc, #336]	; (800067c <HAL_UART_RxCpltCallback+0x19c>)
 800052c:	4a57      	ldr	r2, [pc, #348]	; (800068c <HAL_UART_RxCpltCallback+0x1ac>)
 800052e:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 8000530:	4b54      	ldr	r3, [pc, #336]	; (8000684 <HAL_UART_RxCpltCallback+0x1a4>)
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000536:	4b54      	ldr	r3, [pc, #336]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]
 800053c:	e058      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
	  }
	  else if(dma_tx_buffer[0] == 'L')
 800053e:	4b4c      	ldr	r3, [pc, #304]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b4c      	cmp	r3, #76	; 0x4c
 8000544:	d10c      	bne.n	8000560 <HAL_UART_RxCpltCallback+0x80>
	  {
		  direction = 0;
 8000546:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <HAL_UART_RxCpltCallback+0x198>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
		  degree = 10.0;
 800054c:	4b4b      	ldr	r3, [pc, #300]	; (800067c <HAL_UART_RxCpltCallback+0x19c>)
 800054e:	4a4c      	ldr	r2, [pc, #304]	; (8000680 <HAL_UART_RxCpltCallback+0x1a0>)
 8000550:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 8000552:	4b4c      	ldr	r3, [pc, #304]	; (8000684 <HAL_UART_RxCpltCallback+0x1a4>)
 8000554:	2200      	movs	r2, #0
 8000556:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000558:	4b4b      	ldr	r3, [pc, #300]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 800055a:	2200      	movs	r2, #0
 800055c:	801a      	strh	r2, [r3, #0]
 800055e:	e047      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
	  }
	  else if(dma_tx_buffer[0] == 'l')
 8000560:	4b43      	ldr	r3, [pc, #268]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b6c      	cmp	r3, #108	; 0x6c
 8000566:	d10c      	bne.n	8000582 <HAL_UART_RxCpltCallback+0xa2>
	  {
		  direction = 0;
 8000568:	4b43      	ldr	r3, [pc, #268]	; (8000678 <HAL_UART_RxCpltCallback+0x198>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
		  degree = 5.0;
 800056e:	4b43      	ldr	r3, [pc, #268]	; (800067c <HAL_UART_RxCpltCallback+0x19c>)
 8000570:	4a46      	ldr	r2, [pc, #280]	; (800068c <HAL_UART_RxCpltCallback+0x1ac>)
 8000572:	601a      	str	r2, [r3, #0]
		  spray_counter_1 = 0;
 8000574:	4b43      	ldr	r3, [pc, #268]	; (8000684 <HAL_UART_RxCpltCallback+0x1a4>)
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 800057a:	4b43      	ldr	r3, [pc, #268]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 800057c:	2200      	movs	r2, #0
 800057e:	801a      	strh	r2, [r3, #0]
 8000580:	e036      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
	  }
	  else if (dma_tx_buffer[0] == 'H')
 8000582:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b48      	cmp	r3, #72	; 0x48
 8000588:	d114      	bne.n	80005b4 <HAL_UART_RxCpltCallback+0xd4>
	  {
		  direction = 2;
 800058a:	4b3b      	ldr	r3, [pc, #236]	; (8000678 <HAL_UART_RxCpltCallback+0x198>)
 800058c:	2202      	movs	r2, #2
 800058e:	601a      	str	r2, [r3, #0]
		  degree = 0.0;
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <HAL_UART_RxCpltCallback+0x19c>)
 8000592:	f04f 0200 	mov.w	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
		  reset_counter = 0;
 8000598:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 800059a:	2200      	movs	r2, #0
 800059c:	801a      	strh	r2, [r3, #0]
		  if(spray_counter_1 <= CAMERA_HALT)
 800059e:	4b39      	ldr	r3, [pc, #228]	; (8000684 <HAL_UART_RxCpltCallback+0x1a4>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d824      	bhi.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
		  {
			  ++spray_counter_1;
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <HAL_UART_RxCpltCallback+0x1a4>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b35      	ldr	r3, [pc, #212]	; (8000684 <HAL_UART_RxCpltCallback+0x1a4>)
 80005b0:	801a      	strh	r2, [r3, #0]
 80005b2:	e01d      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
		  }
	  }
	  else if (dma_tx_buffer[0] == 'M')
 80005b4:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b4d      	cmp	r3, #77	; 0x4d
 80005ba:	d112      	bne.n	80005e2 <HAL_UART_RxCpltCallback+0x102>
	  {
		  direction = 2;
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <HAL_UART_RxCpltCallback+0x198>)
 80005be:	2202      	movs	r2, #2
 80005c0:	601a      	str	r2, [r3, #0]
		  degree = 0.0;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <HAL_UART_RxCpltCallback+0x19c>)
 80005c4:	f04f 0200 	mov.w	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
		  if (reset_counter <= RESET_COUNT)
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005d2:	d80d      	bhi.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
		  {
			  ++reset_counter;
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 80005de:	801a      	strh	r2, [r3, #0]
 80005e0:	e006      	b.n	80005f0 <HAL_UART_RxCpltCallback+0x110>
		  }
	  }
	  else
	  {
		  direction = 2;
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <HAL_UART_RxCpltCallback+0x198>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	601a      	str	r2, [r3, #0]
		  degree = 0.0;
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <HAL_UART_RxCpltCallback+0x19c>)
 80005ea:	f04f 0200 	mov.w	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
	  }


	  if(dma_tx_buffer[1] == 'F')
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	2b46      	cmp	r3, #70	; 0x46
 80005f6:	d109      	bne.n	800060c <HAL_UART_RxCpltCallback+0x12c>
	  {
		  motor_state_selector(MOTOR_F);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fc9b 	bl	8000f34 <motor_state_selector>
		  spray_counter_2 = 0;
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_UART_RxCpltCallback+0x1b0>)
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 8000606:	2200      	movs	r2, #0
 8000608:	801a      	strh	r2, [r3, #0]
 800060a:	e025      	b.n	8000658 <HAL_UART_RxCpltCallback+0x178>

	  }
	  else if(dma_tx_buffer[1] == 'S')
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	2b53      	cmp	r3, #83	; 0x53
 8000612:	d109      	bne.n	8000628 <HAL_UART_RxCpltCallback+0x148>
	  {
		  motor_state_selector(MOTOR_FS);
 8000614:	2002      	movs	r0, #2
 8000616:	f000 fc8d 	bl	8000f34 <motor_state_selector>
		  spray_counter_2 = 0;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <HAL_UART_RxCpltCallback+0x1b0>)
 800061c:	2200      	movs	r2, #0
 800061e:	801a      	strh	r2, [r3, #0]
		  reset_counter = 0;
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 8000622:	2200      	movs	r2, #0
 8000624:	801a      	strh	r2, [r3, #0]
 8000626:	e017      	b.n	8000658 <HAL_UART_RxCpltCallback+0x178>
	  }
	  else if(dma_tx_buffer[1] == 'H')
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <HAL_UART_RxCpltCallback+0x190>)
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	2b48      	cmp	r3, #72	; 0x48
 800062e:	d110      	bne.n	8000652 <HAL_UART_RxCpltCallback+0x172>
	  {
		  motor_state_selector(MOTOR_HALT);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fc7f 	bl	8000f34 <motor_state_selector>
		  reset_counter = 0;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_UART_RxCpltCallback+0x1a8>)
 8000638:	2200      	movs	r2, #0
 800063a:	801a      	strh	r2, [r3, #0]
		  if(spray_counter_2 <= CAMERA_HALT)
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_UART_RxCpltCallback+0x1b0>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	d809      	bhi.n	8000658 <HAL_UART_RxCpltCallback+0x178>
		  {
			  ++spray_counter_2;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_UART_RxCpltCallback+0x1b0>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_UART_RxCpltCallback+0x1b0>)
 800064e:	801a      	strh	r2, [r3, #0]
 8000650:	e002      	b.n	8000658 <HAL_UART_RxCpltCallback+0x178>
		  }
	  }
	  else
	  {
		  // We did not detect the object, halt and wait for further info
		  motor_state_selector(MOTOR_HALT);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 fc6e 	bl	8000f34 <motor_state_selector>
	  }

  }
  HAL_UART_Receive_DMA(&huart2, dma_rx_buffer, BUFFER_SIZE);
 8000658:	2202      	movs	r2, #2
 800065a:	4904      	ldr	r1, [pc, #16]	; (800066c <HAL_UART_RxCpltCallback+0x18c>)
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <HAL_UART_RxCpltCallback+0x1b4>)
 800065e:	f004 f816 	bl	800468e <HAL_UART_Receive_DMA>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000020c 	.word	0x2000020c
 8000670:	20000208 	.word	0x20000208
 8000674:	2000020e 	.word	0x2000020e
 8000678:	20000210 	.word	0x20000210
 800067c:	20000214 	.word	0x20000214
 8000680:	41200000 	.word	0x41200000
 8000684:	20000218 	.word	0x20000218
 8000688:	2000021e 	.word	0x2000021e
 800068c:	40a00000 	.word	0x40a00000
 8000690:	2000021a 	.word	0x2000021a
 8000694:	20000100 	.word	0x20000100

08000698 <DMA_Message_Init>:

void DMA_Message_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i < BUFFER_SIZE; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e006      	b.n	80006b2 <DMA_Message_Init+0x1a>
	{
		dma_rx_buffer[i] = 'M';
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <DMA_Message_Init+0x30>)
 80006a8:	214d      	movs	r1, #77	; 0x4d
 80006aa:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < BUFFER_SIZE; i++)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	3301      	adds	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d9f5      	bls.n	80006a4 <DMA_Message_Init+0xc>
	}
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	2000020c 	.word	0x2000020c

080006cc <Counter_Init>:

void Counter_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	spray_counter_1 = 0;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <Counter_Init+0x38>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	801a      	strh	r2, [r3, #0]
	spray_counter_2 = 0;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <Counter_Init+0x3c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	801a      	strh	r2, [r3, #0]
	spray_time = -1;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <Counter_Init+0x40>)
 80006de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e2:	801a      	strh	r2, [r3, #0]
	reset_counter = 0;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <Counter_Init+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	801a      	strh	r2, [r3, #0]
	ignore_counter = -1;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <Counter_Init+0x48>)
 80006ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f0:	801a      	strh	r2, [r3, #0]
	turn_counter = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <Counter_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000218 	.word	0x20000218
 8000708:	2000021a 	.word	0x2000021a
 800070c:	2000021c 	.word	0x2000021c
 8000710:	2000021e 	.word	0x2000021e
 8000714:	20000220 	.word	0x20000220
 8000718:	20000224 	.word	0x20000224

0800071c <Global_Status_Init>:

void Global_Status_Init(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	global_status = 0;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <Global_Status_Init+0x14>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	2000020e 	.word	0x2000020e

08000734 <Stepper_Motor_Reset>:

void Stepper_Motor_Reset(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	if(turn_counter < 0)
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <Stepper_Motor_Reset+0x84>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	da19      	bge.n	8000774 <Stepper_Motor_Reset+0x40>
	{
		direction = 0;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <Stepper_Motor_Reset+0x88>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
		degree = (float)(turn_counter * 5);
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <Stepper_Motor_Reset+0x84>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <Stepper_Motor_Reset+0x8c>)
 800075a:	edc3 7a00 	vstr	s15, [r3]
		stepper_step_angle(degree, direction);
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <Stepper_Motor_Reset+0x8c>)
 8000760:	edd3 7a00 	vldr	s15, [r3]
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <Stepper_Motor_Reset+0x88>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	eeb0 0a67 	vmov.f32	s0, s15
 800076e:	f000 fc6d 	bl	800104c <stepper_step_angle>
 8000772:	e01c      	b.n	80007ae <Stepper_Motor_Reset+0x7a>
	}
	else if (turn_counter > 0)
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <Stepper_Motor_Reset+0x84>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dd18      	ble.n	80007ae <Stepper_Motor_Reset+0x7a>
	{
		direction = 1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <Stepper_Motor_Reset+0x88>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
		degree = (float)(turn_counter * 5);
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <Stepper_Motor_Reset+0x84>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4613      	mov	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <Stepper_Motor_Reset+0x8c>)
 8000796:	edc3 7a00 	vstr	s15, [r3]
		stepper_step_angle(degree, direction);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Stepper_Motor_Reset+0x8c>)
 800079c:	edd3 7a00 	vldr	s15, [r3]
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <Stepper_Motor_Reset+0x88>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	eeb0 0a67 	vmov.f32	s0, s15
 80007aa:	f000 fc4f 	bl	800104c <stepper_step_angle>
	}

//	degree = (float)(turn_counter * 5);
//	stepper_step_angle(degree, direction);
	turn_counter = 0;
 80007ae:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <Stepper_Motor_Reset+0x84>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000224 	.word	0x20000224
 80007bc:	20000210 	.word	0x20000210
 80007c0:	20000214 	.word	0x20000214

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 ff7f 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f947 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 fb09 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d6:	f000 fadf 	bl	8000d98 <MX_DMA_Init>
  MX_ADC3_Init();
 80007da:	f000 f9a9 	bl	8000b30 <MX_ADC3_Init>
  MX_USART2_UART_Init();
 80007de:	f000 fab1 	bl	8000d44 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80007e2:	f000 fa79 	bl	8000cd8 <MX_TIM6_Init>
  MX_TIM3_Init();
 80007e6:	f000 f9f5 	bl	8000bd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, &VR, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	498c      	ldr	r1, [pc, #560]	; (8000a20 <main+0x25c>)
 80007ee:	488d      	ldr	r0, [pc, #564]	; (8000a24 <main+0x260>)
 80007f0:	f001 f846 	bl	8001880 <HAL_ADC_Start_DMA>
  DMA_Message_Init();
 80007f4:	f7ff ff50 	bl	8000698 <DMA_Message_Init>
  HAL_UART_Receive_DMA(&huart2, dma_rx_buffer, BUFFER_SIZE);
 80007f8:	2202      	movs	r2, #2
 80007fa:	498b      	ldr	r1, [pc, #556]	; (8000a28 <main+0x264>)
 80007fc:	488b      	ldr	r0, [pc, #556]	; (8000a2c <main+0x268>)
 80007fe:	f003 ff46 	bl	800468e <HAL_UART_Receive_DMA>
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000802:	2100      	movs	r1, #0
 8000804:	488a      	ldr	r0, [pc, #552]	; (8000a30 <main+0x26c>)
 8000806:	f002 ffd3 	bl	80037b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800080a:	2104      	movs	r1, #4
 800080c:	4888      	ldr	r0, [pc, #544]	; (8000a30 <main+0x26c>)
 800080e:	f002 ffcf 	bl	80037b0 <HAL_TIM_PWM_Start>
  Global_Status_Init();
 8000812:	f7ff ff83 	bl	800071c <Global_Status_Init>
  Counter_Init();
 8000816:	f7ff ff59 	bl	80006cc <Counter_Init>
  /* USER CODE END 2 */
  bool test = true;
 800081a:	2301      	movs	r3, #1
 800081c:	70fb      	strb	r3, [r7, #3]
//	  if (test) {
//		  test = false;
//		  stepper_step_angle(60.0, 1);
//	  }

	  if (global_status == 1)
 800081e:	4b85      	ldr	r3, [pc, #532]	; (8000a34 <main+0x270>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d160      	bne.n	80008e8 <main+0x124>
	  {
		  // Rotate sprayer nozzle and track total degrees
		  int turn_amount = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
		  if(direction == 0)
 800082a:	4b83      	ldr	r3, [pc, #524]	; (8000a38 <main+0x274>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d119      	bne.n	8000866 <main+0xa2>
		  {
			  if(degree == 10.0)
 8000832:	4b82      	ldr	r3, [pc, #520]	; (8000a3c <main+0x278>)
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800083c:	eef4 7a47 	vcmp.f32	s15, s14
 8000840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000844:	d102      	bne.n	800084c <main+0x88>
			  {
				  turn_amount = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e02b      	b.n	80008a4 <main+0xe0>
			  }
			  else if(degree == 5.0)
 800084c:	4b7b      	ldr	r3, [pc, #492]	; (8000a3c <main+0x278>)
 800084e:	edd3 7a00 	vldr	s15, [r3]
 8000852:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000856:	eef4 7a47 	vcmp.f32	s15, s14
 800085a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085e:	d121      	bne.n	80008a4 <main+0xe0>
			  {
				  turn_amount = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	e01e      	b.n	80008a4 <main+0xe0>
			  }
		  }
		  else if (direction == 1)
 8000866:	4b74      	ldr	r3, [pc, #464]	; (8000a38 <main+0x274>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d11a      	bne.n	80008a4 <main+0xe0>
		  {
			  if(degree == 10.0)
 800086e:	4b73      	ldr	r3, [pc, #460]	; (8000a3c <main+0x278>)
 8000870:	edd3 7a00 	vldr	s15, [r3]
 8000874:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000878:	eef4 7a47 	vcmp.f32	s15, s14
 800087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000880:	d103      	bne.n	800088a <main+0xc6>
			  {
				  turn_amount = -2;
 8000882:	f06f 0301 	mvn.w	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	e00c      	b.n	80008a4 <main+0xe0>
			  }
			  else if(degree == 5.0)
 800088a:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <main+0x278>)
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000894:	eef4 7a47 	vcmp.f32	s15, s14
 8000898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089c:	d102      	bne.n	80008a4 <main+0xe0>
			  {
				  turn_amount = -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	607b      	str	r3, [r7, #4]
			  }
		  }
		  if (turn_counter + turn_amount > TURN_MAX || turn_counter + turn_amount < TURN_MIN) {
 80008a4:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <main+0x27c>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	2b0c      	cmp	r3, #12
 80008ae:	dc06      	bgt.n	80008be <main+0xfa>
 80008b0:	4b63      	ldr	r3, [pc, #396]	; (8000a40 <main+0x27c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	f113 0f0c 	cmn.w	r3, #12
 80008bc:	da03      	bge.n	80008c6 <main+0x102>
			  // We are being asked to overturn, give up on this target and move on
			  global_status = 3;
 80008be:	4b5d      	ldr	r3, [pc, #372]	; (8000a34 <main+0x270>)
 80008c0:	2203      	movs	r2, #3
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e058      	b.n	8000978 <main+0x1b4>
		  } else {
			  // The turn looks good, execute
			  stepper_step_angle(degree, direction);
 80008c6:	4b5d      	ldr	r3, [pc, #372]	; (8000a3c <main+0x278>)
 80008c8:	edd3 7a00 	vldr	s15, [r3]
 80008cc:	4b5a      	ldr	r3, [pc, #360]	; (8000a38 <main+0x274>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	eeb0 0a67 	vmov.f32	s0, s15
 80008d6:	f000 fbb9 	bl	800104c <stepper_step_angle>
			  turn_counter += turn_amount;
 80008da:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <main+0x27c>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a57      	ldr	r2, [pc, #348]	; (8000a40 <main+0x27c>)
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e047      	b.n	8000978 <main+0x1b4>
		  }
	  }
	  else if (global_status == 2)
 80008e8:	4b52      	ldr	r3, [pc, #328]	; (8000a34 <main+0x270>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d12c      	bne.n	800094a <main+0x186>
	  {
		  HAL_GPIO_WritePin(SPRAYER_PIN_CLASS, SPRAYER_CONTROL_PIN, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f6:	4853      	ldr	r0, [pc, #332]	; (8000a44 <main+0x280>)
 80008f8:	f002 fa40 	bl	8002d7c <HAL_GPIO_WritePin>
		  if (spray_time == -1) {
 80008fc:	4b52      	ldr	r3, [pc, #328]	; (8000a48 <main+0x284>)
 80008fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000906:	d102      	bne.n	800090e <main+0x14a>
			  spray_time = SPRAYER_DELAY;
 8000908:	4b4f      	ldr	r3, [pc, #316]	; (8000a48 <main+0x284>)
 800090a:	22c8      	movs	r2, #200	; 0xc8
 800090c:	801a      	strh	r2, [r3, #0]
		  }
		  if (spray_time != -1 && --spray_time == 0) {
 800090e:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <main+0x284>)
 8000910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d02e      	beq.n	8000978 <main+0x1b4>
 800091a:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <main+0x284>)
 800091c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	b21a      	sxth	r2, r3
 8000928:	4b47      	ldr	r3, [pc, #284]	; (8000a48 <main+0x284>)
 800092a:	801a      	strh	r2, [r3, #0]
 800092c:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <main+0x284>)
 800092e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d120      	bne.n	8000978 <main+0x1b4>
			  // We have finished spraying
			  HAL_GPIO_WritePin(SPRAYER_PIN_CLASS, SPRAYER_CONTROL_PIN, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093c:	4841      	ldr	r0, [pc, #260]	; (8000a44 <main+0x280>)
 800093e:	f002 fa1d 	bl	8002d7c <HAL_GPIO_WritePin>
			  global_status = 3; // Reset
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <main+0x270>)
 8000944:	2203      	movs	r2, #3
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e016      	b.n	8000978 <main+0x1b4>
		  }
	  }
	  else if (global_status == 3) {
 800094a:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <main+0x270>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d10f      	bne.n	8000972 <main+0x1ae>
		  // Reset the sprayer and move forward
		  if (ignore_counter == -1) {
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <main+0x288>)
 8000954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d10c      	bne.n	8000978 <main+0x1b4>
			  // Initialize the ignore timer
			  motor_state_selector(MOTOR_F);
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fae8 	bl	8000f34 <motor_state_selector>
			  Stepper_Motor_Reset();
 8000964:	f7ff fee6 	bl	8000734 <Stepper_Motor_Reset>
			  ignore_counter = IGNORE_DELAY;
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <main+0x288>)
 800096a:	f241 3288 	movw	r2, #5000	; 0x1388
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	e002      	b.n	8000978 <main+0x1b4>
		  }
	  } else
	  {
		  motor_state_selector(5);
 8000972:	2005      	movs	r0, #5
 8000974:	f000 fade 	bl	8000f34 <motor_state_selector>
	  }


	  if (global_status == 0 && (dma_tx_buffer[0] != 'M' || dma_tx_buffer[1] != 'M' ))
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <main+0x270>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10a      	bne.n	8000996 <main+0x1d2>
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <main+0x28c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b4d      	cmp	r3, #77	; 0x4d
 8000986:	d103      	bne.n	8000990 <main+0x1cc>
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <main+0x28c>)
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	2b4d      	cmp	r3, #77	; 0x4d
 800098e:	d002      	beq.n	8000996 <main+0x1d2>
	  {
		  global_status = 1;
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <main+0x270>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
	  }

	  if (global_status == 1 && reset_counter > RESET_COUNT)
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <main+0x270>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10b      	bne.n	80009b6 <main+0x1f2>
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <main+0x290>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009a6:	d906      	bls.n	80009b6 <main+0x1f2>
	  {
		  global_status = 0;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <main+0x270>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		  Stepper_Motor_Reset();
 80009ae:	f7ff fec1 	bl	8000734 <Stepper_Motor_Reset>
		  Counter_Init();
 80009b2:	f7ff fe8b 	bl	80006cc <Counter_Init>
	  }

	  if (global_status == 1 && spray_counter_1 > CAMERA_HALT && spray_counter_2 > CAMERA_HALT)
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <main+0x270>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10a      	bne.n	80009d4 <main+0x210>
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <main+0x294>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d906      	bls.n	80009d4 <main+0x210>
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <main+0x298>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	2b0f      	cmp	r3, #15
 80009cc:	d902      	bls.n	80009d4 <main+0x210>
	  {
		  global_status = 2;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <main+0x270>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	701a      	strb	r2, [r3, #0]
	  }

	  if (global_status == 3 && ignore_counter != -1 && --ignore_counter == 0)
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <main+0x270>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d11c      	bne.n	8000a16 <main+0x252>
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <main+0x288>)
 80009de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e6:	d016      	beq.n	8000a16 <main+0x252>
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <main+0x288>)
 80009ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	3b01      	subs	r3, #1
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <main+0x288>)
 80009f8:	801a      	strh	r2, [r3, #0]
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <main+0x288>)
 80009fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d108      	bne.n	8000a16 <main+0x252>
	  {
		  ignore_counter = -1;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <main+0x288>)
 8000a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0a:	801a      	strh	r2, [r3, #0]
		  global_status = 0;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <main+0x270>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
		  Counter_Init();
 8000a12:	f7ff fe5b 	bl	80006cc <Counter_Init>
//    if (1) {
//    	motor_state_selector(MOTOR_STATE_VAR);
//    	motor_delay = MOTOR_DELAY;
//    }

    HAL_Delay(1);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 feca 	bl	80017b0 <HAL_Delay>
	  if (global_status == 1)
 8000a1c:	e6ff      	b.n	800081e <main+0x5a>
 8000a1e:	bf00      	nop
 8000a20:	20000204 	.word	0x20000204
 8000a24:	20000028 	.word	0x20000028
 8000a28:	2000020c 	.word	0x2000020c
 8000a2c:	20000100 	.word	0x20000100
 8000a30:	20000070 	.word	0x20000070
 8000a34:	2000020e 	.word	0x2000020e
 8000a38:	20000210 	.word	0x20000210
 8000a3c:	20000214 	.word	0x20000214
 8000a40:	20000224 	.word	0x20000224
 8000a44:	40020400 	.word	0x40020400
 8000a48:	2000021c 	.word	0x2000021c
 8000a4c:	20000220 	.word	0x20000220
 8000a50:	20000208 	.word	0x20000208
 8000a54:	2000021e 	.word	0x2000021e
 8000a58:	20000218 	.word	0x20000218
 8000a5c:	2000021a 	.word	0x2000021a

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fee6 	bl	8005840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <SystemClock_Config+0xc8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <SystemClock_Config+0xc8>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemClock_Config+0xc8>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <SystemClock_Config+0xcc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <SystemClock_Config+0xcc>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <SystemClock_Config+0xcc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ad4:	2348      	movs	r3, #72	; 0x48
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0320 	add.w	r3, r7, #32
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 f963 	bl	8002db0 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af0:	f000 fbc0 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 fbc5 	bl	80032a0 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b1c:	f000 fbaa 	bl	8001274 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3750      	adds	r7, #80	; 0x50
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b44:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <MX_ADC3_Init+0x9c>)
 8000b46:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <MX_ADC3_Init+0xa0>)
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000b90:	f000 fe32 	bl	80017f8 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 fb6b 	bl	8001274 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_ADC3_Init+0x98>)
 8000bb0:	f000 ff94 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000bba:	f000 fb5b 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000028 	.word	0x20000028
 8000bcc:	40012200 	.word	0x40012200
 8000bd0:	0f000001 	.word	0x0f000001

08000bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <MX_TIM3_Init+0x100>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c2a:	4829      	ldr	r0, [pc, #164]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c2c:	f002 fd18 	bl	8003660 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c36:	f000 fb1d 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c48:	f003 f844 	bl	8003cd4 <HAL_TIM_ConfigClockSource>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c52:	f000 fb0f 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c56:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c58:	f002 fd51 	bl	80036fe <HAL_TIM_PWM_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c62:	f000 fb07 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	4619      	mov	r1, r3
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c76:	f003 fc2d 	bl	80044d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c80:	f000 faf8 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c84:	2360      	movs	r3, #96	; 0x60
 8000c86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4095;
 8000c88:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000c9e:	f002 ff57 	bl	8003b50 <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ca8:	f000 fae4 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000cb4:	f002 ff4c 	bl	8003b50 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000cbe:	f000 fad9 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <MX_TIM3_Init+0xfc>)
 8000cc4:	f000 fb86 	bl	80013d4 <HAL_TIM_MspPostInit>

}
 8000cc8:	bf00      	nop
 8000cca:	3738      	adds	r7, #56	; 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000070 	.word	0x20000070
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000ce8:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <MX_TIM6_Init+0x68>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000cee:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000cf2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000cfc:	2232      	movs	r2, #50	; 0x32
 8000cfe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000d08:	f002 fcaa 	bl	8003660 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d12:	f000 faaf 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d16:	2320      	movs	r3, #32
 8000d18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000d24:	f003 fbd6 	bl	80044d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d2e:	f000 faa1 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000b8 	.word	0x200000b8
 8000d40:	40001000 	.word	0x40001000

08000d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_USART2_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f003 fc3a 	bl	80045f4 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f000 fa75 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000100 	.word	0x20000100
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_DMA_Init+0x4c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <MX_DMA_Init+0x4c>)
 8000da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_DMA_Init+0x4c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2010      	movs	r0, #16
 8000dc0:	f001 fa07 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dc4:	2010      	movs	r0, #16
 8000dc6:	f001 fa20 	bl	800220a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2011      	movs	r0, #17
 8000dd0:	f001 f9ff 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000dd4:	2011      	movs	r0, #17
 8000dd6:	f001 fa18 	bl	800220a <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <MX_GPIO_Init+0x13c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000e74:	482c      	ldr	r0, [pc, #176]	; (8000f28 <MX_GPIO_Init+0x140>)
 8000e76:	f001 ff81 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	21f0      	movs	r1, #240	; 0xf0
 8000e7e:	482b      	ldr	r0, [pc, #172]	; (8000f2c <MX_GPIO_Init+0x144>)
 8000e80:	f001 ff7c 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000e8a:	4829      	ldr	r0, [pc, #164]	; (8000f30 <MX_GPIO_Init+0x148>)
 8000e8c:	f001 ff76 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e90:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4820      	ldr	r0, [pc, #128]	; (8000f28 <MX_GPIO_Init+0x140>)
 8000ea6:	f001 fdcd 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 8000eaa:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <MX_GPIO_Init+0x140>)
 8000ec4:	f001 fdbe 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4814      	ldr	r0, [pc, #80]	; (8000f2c <MX_GPIO_Init+0x144>)
 8000edc:	f001 fdb2 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ee0:	23f0      	movs	r3, #240	; 0xf0
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_GPIO_Init+0x144>)
 8000ef8:	f001 fda4 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000efc:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_GPIO_Init+0x148>)
 8000f16:	f001 fd95 	bl	8002a44 <HAL_GPIO_Init>

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400

08000f34 <motor_state_selector>:
    ticks--;
  }
}


void motor_state_selector(int state) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	switch(state){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d87d      	bhi.n	800103e <motor_state_selector+0x10a>
 8000f42:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <motor_state_selector+0x14>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f5d 	.word	0x08000f5d
 8000f4c:	08000f87 	.word	0x08000f87
 8000f50:	08000fb5 	.word	0x08000fb5
 8000f54:	08000fe3 	.word	0x08000fe3
 8000f58:	08001011 	.word	0x08001011
	  case 0:
		  // Halt
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000f5c:	4b39      	ldr	r3, [pc, #228]	; (8001044 <motor_state_selector+0x110>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <motor_state_selector+0x110>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);// PIN B15 off
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f72:	4835      	ldr	r0, [pc, #212]	; (8001048 <motor_state_selector+0x114>)
 8000f74:	f001 ff02 	bl	8002d7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);// PIN B15 off
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7e:	4832      	ldr	r0, [pc, #200]	; (8001048 <motor_state_selector+0x114>)
 8000f80:	f001 fefc 	bl	8002d7c <HAL_GPIO_WritePin>
		  return;
 8000f84:	e05b      	b.n	800103e <motor_state_selector+0x10a>
	  case 1:
		  // Forward
		  // 4095 correlates with max speed (100% duty cycle) in the forward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 4095);
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <motor_state_selector+0x110>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 4095);
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <motor_state_selector+0x110>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);// PIN B15 off
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <motor_state_selector+0x114>)
 8000fa2:	f001 feeb 	bl	8002d7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);// PIN B14 off
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	4826      	ldr	r0, [pc, #152]	; (8001048 <motor_state_selector+0x114>)
 8000fae:	f001 fee5 	bl	8002d7c <HAL_GPIO_WritePin>
		  return;
 8000fb2:	e044      	b.n	800103e <motor_state_selector+0x10a>
	  case 2:
		  // Forward slowly
		  // 4095 correlates with max speed (100% duty cycle) in the forward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2048);
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <motor_state_selector+0x110>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2048);
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <motor_state_selector+0x110>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);// PIN B15 off
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <motor_state_selector+0x114>)
 8000fd0:	f001 fed4 	bl	8002d7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);// PIN B14 off
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <motor_state_selector+0x114>)
 8000fdc:	f001 fece 	bl	8002d7c <HAL_GPIO_WritePin>
		  return;
 8000fe0:	e02d      	b.n	800103e <motor_state_selector+0x10a>
	  case 3:
		  // Backward
		  // 2048 correlates with max speed (50% duty cycle) in the backward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 4095);
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <motor_state_selector+0x110>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 4095);
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <motor_state_selector+0x110>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);// PIN B15 on
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <motor_state_selector+0x114>)
 8000ffe:	f001 febd 	bl	8002d7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// PIN B14 on
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <motor_state_selector+0x114>)
 800100a:	f001 feb7 	bl	8002d7c <HAL_GPIO_WritePin>
		  return;
 800100e:	e016      	b.n	800103e <motor_state_selector+0x10a>
	  case 4:
		  // Backward
		  // 2048 correlates with max speed (50% duty cycle) in the backward direction,
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2048);
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <motor_state_selector+0x110>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2048);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <motor_state_selector+0x110>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);// PIN B15 on
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <motor_state_selector+0x114>)
 800102c:	f001 fea6 	bl	8002d7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);// PIN B14 on
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <motor_state_selector+0x114>)
 8001038:	f001 fea0 	bl	8002d7c <HAL_GPIO_WritePin>
		  return;
 800103c:	bf00      	nop
	}
}
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000070 	.word	0x20000070
 8001048:	40020400 	.word	0x40020400

0800104c <stepper_step_angle>:


// BLOCKING OPERATION, TAKES <<ANGLE>> MILLISECONDS TO COMPLETE
void stepper_step_angle (float angle, int direction)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	ed87 0a01 	vstr	s0, [r7, #4]
 8001056:	6038      	str	r0, [r7, #0]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <stepper_step_angle+0x90>)
 800105a:	613b      	str	r3, [r7, #16]
	int numberofsequences = (int) (angle/anglepersequence);
 800105c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001060:	ed97 7a04 	vldr	s14, [r7, #16]
 8001064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106c:	ee17 3a90 	vmov	r3, s15
 8001070:	60fb      	str	r3, [r7, #12]

	for (int seq=0; seq<numberofsequences; seq++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e027      	b.n	80010c8 <stepper_step_angle+0x7c>
	{
		if (direction == 0)  // for clockwise
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10f      	bne.n	800109e <stepper_step_angle+0x52>
		{
			for (int step=7; step>=0; step--)
 800107e:	2307      	movs	r3, #7
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	e008      	b.n	8001096 <stepper_step_angle+0x4a>
			{
				stepper_half_drive(step);
 8001084:	69b8      	ldr	r0, [r7, #24]
 8001086:	f000 f82b 	bl	80010e0 <stepper_half_drive>
        HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f000 fb90 	bl	80017b0 <HAL_Delay>
			for (int step=7; step>=0; step--)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	3b01      	subs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b00      	cmp	r3, #0
 800109a:	daf3      	bge.n	8001084 <stepper_step_angle+0x38>
 800109c:	e011      	b.n	80010c2 <stepper_step_angle+0x76>
				// stepper_set_rpm(rpm);
			}

		}

		else if (direction == 1)  // for anti-clockwise
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10e      	bne.n	80010c2 <stepper_step_angle+0x76>
		{
			for (int step=0; step<8; step++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e008      	b.n	80010bc <stepper_step_angle+0x70>
			{
				stepper_half_drive(step);
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f000 f818 	bl	80010e0 <stepper_half_drive>
        HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f000 fb7d 	bl	80017b0 <HAL_Delay>
			for (int step=0; step<8; step++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b07      	cmp	r3, #7
 80010c0:	ddf3      	ble.n	80010aa <stepper_step_angle+0x5e>
	for (int seq=0; seq<numberofsequences; seq++)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbd3      	blt.n	8001078 <stepper_step_angle+0x2c>
				// stepper_set_rpm(rpm);
			}
		}
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	3f340000 	.word	0x3f340000

080010e0 <stepper_half_drive>:

void stepper_half_drive (int step)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  switch (step){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	f200 80bc 	bhi.w	8001268 <stepper_half_drive+0x188>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <stepper_half_drive+0x18>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001119 	.word	0x08001119
 80010fc:	08001143 	.word	0x08001143
 8001100:	0800116d 	.word	0x0800116d
 8001104:	08001197 	.word	0x08001197
 8001108:	080011c1 	.word	0x080011c1
 800110c:	080011eb 	.word	0x080011eb
 8001110:	08001215 	.word	0x08001215
 8001114:	0800123f 	.word	0x0800123f
    case 0:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN1
 8001118:	2201      	movs	r2, #1
 800111a:	2110      	movs	r1, #16
 800111c:	4854      	ldr	r0, [pc, #336]	; (8001270 <stepper_half_drive+0x190>)
 800111e:	f001 fe2d 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	4852      	ldr	r0, [pc, #328]	; (8001270 <stepper_half_drive+0x190>)
 8001128:	f001 fe28 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 800112c:	2200      	movs	r2, #0
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	484f      	ldr	r0, [pc, #316]	; (8001270 <stepper_half_drive+0x190>)
 8001132:	f001 fe23 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 8001136:	2200      	movs	r2, #0
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	484d      	ldr	r0, [pc, #308]	; (8001270 <stepper_half_drive+0x190>)
 800113c:	f001 fe1e 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 8001140:	e092      	b.n	8001268 <stepper_half_drive+0x188>

    case 1:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN1
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	484a      	ldr	r0, [pc, #296]	; (8001270 <stepper_half_drive+0x190>)
 8001148:	f001 fe18 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN2
 800114c:	2201      	movs	r2, #1
 800114e:	2120      	movs	r1, #32
 8001150:	4847      	ldr	r0, [pc, #284]	; (8001270 <stepper_half_drive+0x190>)
 8001152:	f001 fe13 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4845      	ldr	r0, [pc, #276]	; (8001270 <stepper_half_drive+0x190>)
 800115c:	f001 fe0e 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 8001160:	2200      	movs	r2, #0
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	4842      	ldr	r0, [pc, #264]	; (8001270 <stepper_half_drive+0x190>)
 8001166:	f001 fe09 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 800116a:	e07d      	b.n	8001268 <stepper_half_drive+0x188>

    case 2:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 800116c:	2200      	movs	r2, #0
 800116e:	2110      	movs	r1, #16
 8001170:	483f      	ldr	r0, [pc, #252]	; (8001270 <stepper_half_drive+0x190>)
 8001172:	f001 fe03 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN2
 8001176:	2201      	movs	r2, #1
 8001178:	2120      	movs	r1, #32
 800117a:	483d      	ldr	r0, [pc, #244]	; (8001270 <stepper_half_drive+0x190>)
 800117c:	f001 fdfe 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 8001180:	2200      	movs	r2, #0
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	483a      	ldr	r0, [pc, #232]	; (8001270 <stepper_half_drive+0x190>)
 8001186:	f001 fdf9 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 800118a:	2200      	movs	r2, #0
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	4838      	ldr	r0, [pc, #224]	; (8001270 <stepper_half_drive+0x190>)
 8001190:	f001 fdf4 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 8001194:	e068      	b.n	8001268 <stepper_half_drive+0x188>

    case 3:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 8001196:	2200      	movs	r2, #0
 8001198:	2110      	movs	r1, #16
 800119a:	4835      	ldr	r0, [pc, #212]	; (8001270 <stepper_half_drive+0x190>)
 800119c:	f001 fdee 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN2
 80011a0:	2201      	movs	r2, #1
 80011a2:	2120      	movs	r1, #32
 80011a4:	4832      	ldr	r0, [pc, #200]	; (8001270 <stepper_half_drive+0x190>)
 80011a6:	f001 fde9 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN3
 80011aa:	2201      	movs	r2, #1
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4830      	ldr	r0, [pc, #192]	; (8001270 <stepper_half_drive+0x190>)
 80011b0:	f001 fde4 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 80011b4:	2200      	movs	r2, #0
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	482d      	ldr	r0, [pc, #180]	; (8001270 <stepper_half_drive+0x190>)
 80011ba:	f001 fddf 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 80011be:	e053      	b.n	8001268 <stepper_half_drive+0x188>

    case 4:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 80011c0:	2200      	movs	r2, #0
 80011c2:	2110      	movs	r1, #16
 80011c4:	482a      	ldr	r0, [pc, #168]	; (8001270 <stepper_half_drive+0x190>)
 80011c6:	f001 fdd9 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	4828      	ldr	r0, [pc, #160]	; (8001270 <stepper_half_drive+0x190>)
 80011d0:	f001 fdd4 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN3
 80011d4:	2201      	movs	r2, #1
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	4825      	ldr	r0, [pc, #148]	; (8001270 <stepper_half_drive+0x190>)
 80011da:	f001 fdcf 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN4
 80011de:	2200      	movs	r2, #0
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <stepper_half_drive+0x190>)
 80011e4:	f001 fdca 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 80011e8:	e03e      	b.n	8001268 <stepper_half_drive+0x188>

    case 5:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 80011ea:	2200      	movs	r2, #0
 80011ec:	2110      	movs	r1, #16
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <stepper_half_drive+0x190>)
 80011f0:	f001 fdc4 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 80011f4:	2200      	movs	r2, #0
 80011f6:	2120      	movs	r1, #32
 80011f8:	481d      	ldr	r0, [pc, #116]	; (8001270 <stepper_half_drive+0x190>)
 80011fa:	f001 fdbf 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN3
 80011fe:	2201      	movs	r2, #1
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <stepper_half_drive+0x190>)
 8001204:	f001 fdba 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN4
 8001208:	2201      	movs	r2, #1
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <stepper_half_drive+0x190>)
 800120e:	f001 fdb5 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 8001212:	e029      	b.n	8001268 <stepper_half_drive+0x188>

    case 6:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);   // IN1
 8001214:	2200      	movs	r2, #0
 8001216:	2110      	movs	r1, #16
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <stepper_half_drive+0x190>)
 800121a:	f001 fdaf 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	4813      	ldr	r0, [pc, #76]	; (8001270 <stepper_half_drive+0x190>)
 8001224:	f001 fdaa 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 8001228:	2200      	movs	r2, #0
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	4810      	ldr	r0, [pc, #64]	; (8001270 <stepper_half_drive+0x190>)
 800122e:	f001 fda5 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN4
 8001232:	2201      	movs	r2, #1
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <stepper_half_drive+0x190>)
 8001238:	f001 fda0 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 800123c:	e014      	b.n	8001268 <stepper_half_drive+0x188>

    case 7:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN1
 800123e:	2201      	movs	r2, #1
 8001240:	2110      	movs	r1, #16
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <stepper_half_drive+0x190>)
 8001244:	f001 fd9a 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN2
 8001248:	2200      	movs	r2, #0
 800124a:	2120      	movs	r1, #32
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <stepper_half_drive+0x190>)
 800124e:	f001 fd95 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN3
 8001252:	2200      	movs	r2, #0
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <stepper_half_drive+0x190>)
 8001258:	f001 fd90 	bl	8002d7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN4
 800125c:	2201      	movs	r2, #1
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <stepper_half_drive+0x190>)
 8001262:	f001 fd8b 	bl	8002d7c <HAL_GPIO_WritePin>
        break;
 8001266:	bf00      	nop

    }
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40020000 	.word	0x40020000

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_MspInit+0x4c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_ADC_MspInit+0x7c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d127      	bne.n	8001342 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_ADC_MspInit+0x80>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <HAL_ADC_MspInit+0x80>)
 80012fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_ADC_MspInit+0x84>)
 800133e:	f001 fb81 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012200 	.word	0x40012200
 8001350:	40023800 	.word	0x40023800
 8001354:	40020800 	.word	0x40020800

08001358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_TIM_Base_MspInit+0x70>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10e      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_TIM_Base_MspInit+0x74>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <HAL_TIM_Base_MspInit+0x74>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_TIM_Base_MspInit+0x74>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001386:	e01a      	b.n	80013be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_TIM_Base_MspInit+0x78>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d115      	bne.n	80013be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_TIM_Base_MspInit+0x74>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x74>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_TIM_Base_MspInit+0x74>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2036      	movs	r0, #54	; 0x36
 80013b4:	f000 ff0d 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013b8:	2036      	movs	r0, #54	; 0x36
 80013ba:	f000 ff26 	bl	800220a <HAL_NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40001000 	.word	0x40001000

080013d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d11d      	bne.n	8001432 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001412:	23c0      	movs	r3, #192	; 0xc0
 8001414:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_TIM_MspPostInit+0x70>)
 800142e:	f001 fb09 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40000400 	.word	0x40000400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020800 	.word	0x40020800

08001448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_UART_MspInit+0x14c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	f040 8090 	bne.w	800158c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	4b49      	ldr	r3, [pc, #292]	; (8001598 <HAL_UART_MspInit+0x150>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a48      	ldr	r2, [pc, #288]	; (8001598 <HAL_UART_MspInit+0x150>)
 8001476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
 800147c:	4b46      	ldr	r3, [pc, #280]	; (8001598 <HAL_UART_MspInit+0x150>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <HAL_UART_MspInit+0x150>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a41      	ldr	r2, [pc, #260]	; (8001598 <HAL_UART_MspInit+0x150>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <HAL_UART_MspInit+0x150>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014a4:	230c      	movs	r3, #12
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b4:	2307      	movs	r3, #7
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4837      	ldr	r0, [pc, #220]	; (800159c <HAL_UART_MspInit+0x154>)
 80014c0:	f001 fac0 	bl	8002a44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <HAL_UART_MspInit+0x15c>)
 80014c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_UART_MspInit+0x158>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_UART_MspInit+0x158>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001504:	4826      	ldr	r0, [pc, #152]	; (80015a0 <HAL_UART_MspInit+0x158>)
 8001506:	f000 fe9b 	bl	8002240 <HAL_DMA_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001510:	f7ff feb0 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_UART_MspInit+0x158>)
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_UART_MspInit+0x158>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001522:	4a22      	ldr	r2, [pc, #136]	; (80015ac <HAL_UART_MspInit+0x164>)
 8001524:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001528:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_UART_MspInit+0x160>)
 800153c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001540:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_UART_MspInit+0x160>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_UART_MspInit+0x160>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001562:	f000 fe6d 	bl	8002240 <HAL_DMA_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800156c:	f7ff fe82 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001574:	635a      	str	r2, [r3, #52]	; 0x34
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_UART_MspInit+0x160>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2026      	movs	r0, #38	; 0x26
 8001582:	f000 fe26 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001586:	2026      	movs	r0, #38	; 0x26
 8001588:	f000 fe3f 	bl	800220a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40004400 	.word	0x40004400
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000
 80015a0:	20000144 	.word	0x20000144
 80015a4:	40026088 	.word	0x40026088
 80015a8:	200001a4 	.word	0x200001a4
 80015ac:	400260a0 	.word	0x400260a0

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f8b8 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA1_Stream5_IRQHandler+0x10>)
 800160a:	f000 ffb1 	bl	8002570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000144 	.word	0x20000144

08001618 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Stream6_IRQHandler+0x10>)
 800161e:	f000 ffa7 	bl	8002570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001a4 	.word	0x200001a4

0800162c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <USART2_IRQHandler+0x10>)
 8001632:	f003 f85d 	bl	80046f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000100 	.word	0x20000100

08001640 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM6_DAC_IRQHandler+0x10>)
 8001646:	f002 f97b 	bl	8003940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000b8 	.word	0x200000b8

08001654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800167e:	490e      	ldr	r1, [pc, #56]	; (80016b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001694:	4c0b      	ldr	r4, [pc, #44]	; (80016c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016a2:	f7ff ffd7 	bl	8001654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f004 f8a7 	bl	80057f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff f88b 	bl	80007c4 <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016bc:	08005898 	.word	0x08005898
  ldr r2, =_sbss
 80016c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016c4:	2000022c 	.word	0x2000022c

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>
	...

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_Init+0x40>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_Init+0x40>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_Init+0x40>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 fd61 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f808 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff fdbe 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fd79 	bl	8002226 <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f000 fd41 	bl	80021d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	; (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	20000008 	.word	0x20000008
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008
 8001794:	20000228 	.word	0x20000228

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000228 	.word	0x20000228

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff ffee 	bl	8001798 <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffde 	bl	8001798 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008

080017f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e033      	b.n	8001876 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fd5a 	bl	80012d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800183e:	f023 0302 	bic.w	r3, r3, #2
 8001842:	f043 0202 	orr.w	r2, r3, #2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fa68 	bl	8001d20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
 8001866:	e001      	b.n	800186c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_ADC_Start_DMA+0x1e>
 800189a:	2302      	movs	r3, #2
 800189c:	e0e9      	b.n	8001a72 <HAL_ADC_Start_DMA+0x1f2>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d018      	beq.n	80018e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018c4:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_ADC_Start_DMA+0x1fc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6d      	ldr	r2, [pc, #436]	; (8001a80 <HAL_ADC_Start_DMA+0x200>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0c9a      	lsrs	r2, r3, #18
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3b01      	subs	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f9      	bne.n	80018da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f4:	d107      	bne.n	8001906 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001904:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	f040 80a1 	bne.w	8001a58 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001940:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001954:	d106      	bne.n	8001964 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f023 0206 	bic.w	r2, r3, #6
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
 8001962:	e002      	b.n	800196a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001972:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <HAL_ADC_Start_DMA+0x204>)
 8001974:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <HAL_ADC_Start_DMA+0x208>)
 800197c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	4a42      	ldr	r2, [pc, #264]	; (8001a8c <HAL_ADC_Start_DMA+0x20c>)
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	4a41      	ldr	r2, [pc, #260]	; (8001a90 <HAL_ADC_Start_DMA+0x210>)
 800198c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001996:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	334c      	adds	r3, #76	; 0x4c
 80019c2:	4619      	mov	r1, r3
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f000 fce8 	bl	800239c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d12a      	bne.n	8001a2e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <HAL_ADC_Start_DMA+0x214>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d015      	beq.n	8001a0e <HAL_ADC_Start_DMA+0x18e>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <HAL_ADC_Start_DMA+0x218>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_Start_DMA+0x178>
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_ADC_Start_DMA+0x204>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00a      	beq.n	8001a0e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_ADC_Start_DMA+0x21c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d136      	bne.n	8001a70 <HAL_ADC_Start_DMA+0x1f0>
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_ADC_Start_DMA+0x204>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d130      	bne.n	8001a70 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d129      	bne.n	8001a70 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e020      	b.n	8001a70 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_ADC_Start_DMA+0x214>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d11b      	bne.n	8001a70 <HAL_ADC_Start_DMA+0x1f0>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d114      	bne.n	8001a70 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	e00b      	b.n	8001a70 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f043 0210 	orr.w	r2, r3, #16
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	40012300 	.word	0x40012300
 8001a88:	08001f19 	.word	0x08001f19
 8001a8c:	08001fd3 	.word	0x08001fd3
 8001a90:	08001fef 	.word	0x08001fef
 8001a94:	40012000 	.word	0x40012000
 8001a98:	40012100 	.word	0x40012100
 8001a9c:	40012200 	.word	0x40012200

08001aa0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1c>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e105      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x228>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	d925      	bls.n	8001b54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68d9      	ldr	r1, [r3, #12]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b1e      	subs	r3, #30
 8001b1e:	2207      	movs	r2, #7
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43da      	mvns	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68d9      	ldr	r1, [r3, #12]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4603      	mov	r3, r0
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4403      	add	r3, r0
 8001b46:	3b1e      	subs	r3, #30
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	e022      	b.n	8001b9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	2207      	movs	r2, #7
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	400a      	ands	r2, r1
 8001b76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6919      	ldr	r1, [r3, #16]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4403      	add	r3, r0
 8001b90:	409a      	lsls	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d824      	bhi.n	8001bec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b05      	subs	r3, #5
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b05      	subs	r3, #5
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bea:	e04c      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d824      	bhi.n	8001c3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b23      	subs	r3, #35	; 0x23
 8001c06:	221f      	movs	r2, #31
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	400a      	ands	r2, r1
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b23      	subs	r3, #35	; 0x23
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3c:	e023      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3b41      	subs	r3, #65	; 0x41
 8001c50:	221f      	movs	r2, #31
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b41      	subs	r3, #65	; 0x41
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_ADC_ConfigChannel+0x234>)
 8001c88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <HAL_ADC_ConfigChannel+0x238>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1cc>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_ADC_ConfigChannel+0x238>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d123      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x21e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d003      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x1e6>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d11b      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_ADC_ConfigChannel+0x23c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_ADC_ConfigChannel+0x240>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9a      	lsrs	r2, r3, #18
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40012300 	.word	0x40012300
 8001d14:	40012000 	.word	0x40012000
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d28:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <ADC_Init+0x1f0>)
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	021a      	lsls	r2, r3, #8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6899      	ldr	r1, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <ADC_Init+0x1f4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d022      	beq.n	8001dfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6899      	ldr	r1, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e00f      	b.n	8001e1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0202 	bic.w	r2, r2, #2
 8001e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7e1b      	ldrb	r3, [r3, #24]
 8001e38:	005a      	lsls	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	3b01      	subs	r3, #1
 8001e78:	035a      	lsls	r2, r3, #13
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	e007      	b.n	8001e94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	051a      	lsls	r2, r3, #20
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6899      	ldr	r1, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed6:	025a      	lsls	r2, r3, #9
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	029a      	lsls	r2, r3, #10
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40012300 	.word	0x40012300
 8001f14:	0f000001 	.word	0x0f000001

08001f18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d13c      	bne.n	8001fac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d12b      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d127      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d119      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0220 	bic.w	r2, r2, #32
 8001f7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff fd7b 	bl	8001aa0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001faa:	e00e      	b.n	8001fca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fd85 	bl	8001ac8 <HAL_ADC_ErrorCallback>
}
 8001fbe:	e004      	b.n	8001fca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff fd67 	bl	8001ab4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fd5a 	bl	8001ac8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002188:	d301      	bcc.n	800218e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218a:	2301      	movs	r3, #1
 800218c:	e00f      	b.n	80021ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <SysTick_Config+0x40>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002196:	210f      	movs	r1, #15
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f7ff ff8e 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <SysTick_Config+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <SysTick_Config+0x40>)
 80021a8:	2207      	movs	r2, #7
 80021aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	e000e010 	.word	0xe000e010

080021bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff29 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e4:	f7ff ff3e 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f7ff ff8e 	bl	8002110 <NVIC_EncodePriority>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff5d 	bl	80020bc <__NVIC_SetPriority>
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff31 	bl	8002080 <__NVIC_EnableIRQ>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffa2 	bl	8002178 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff faa4 	bl	8001798 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e099      	b.n	8002390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227c:	e00f      	b.n	800229e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800227e:	f7ff fa8b 	bl	8001798 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b05      	cmp	r3, #5
 800228a:	d908      	bls.n	800229e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e078      	b.n	8002390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e8      	bne.n	800227e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_DMA_Init+0x158>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d107      	bne.n	8002308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4313      	orrs	r3, r2
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f023 0307 	bic.w	r3, r3, #7
 800231e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	2b04      	cmp	r3, #4
 8002330:	d117      	bne.n	8002362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fb01 	bl	800294c <DMA_CheckFifoParam>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800235e:	2301      	movs	r3, #1
 8002360:	e016      	b.n	8002390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fab8 	bl	80028e0 <DMA_CalcBaseAndBitshift>
 8002370:	4603      	mov	r3, r0
 8002372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	223f      	movs	r2, #63	; 0x3f
 800237a:	409a      	lsls	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	f010803f 	.word	0xf010803f

0800239c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_DMA_Start_IT+0x26>
 80023be:	2302      	movs	r3, #2
 80023c0:	e040      	b.n	8002444 <HAL_DMA_Start_IT+0xa8>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d12f      	bne.n	8002436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fa4a 	bl	8002884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	409a      	lsls	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0216 	orr.w	r2, r2, #22
 800240a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0208 	orr.w	r2, r2, #8
 8002422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e005      	b.n	8002442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800245a:	f7ff f99d 	bl	8001798 <HAL_GetTick>
 800245e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d008      	beq.n	800247e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e052      	b.n	8002524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0216 	bic.w	r2, r2, #22
 800248c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <HAL_DMA_Abort+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0208 	bic.w	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ce:	e013      	b.n	80024f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d0:	f7ff f962 	bl	8001798 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d90c      	bls.n	80024f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2203      	movs	r2, #3
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e015      	b.n	8002524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e4      	bne.n	80024d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	223f      	movs	r2, #63	; 0x3f
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d004      	beq.n	800254a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00c      	b.n	8002564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2205      	movs	r2, #5
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800257c:	4b8e      	ldr	r3, [pc, #568]	; (80027b8 <HAL_DMA_IRQHandler+0x248>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a8e      	ldr	r2, [pc, #568]	; (80027bc <HAL_DMA_IRQHandler+0x24c>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0a9b      	lsrs	r3, r3, #10
 8002588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	2208      	movs	r2, #8
 800259c:	409a      	lsls	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01a      	beq.n	80025dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0204 	bic.w	r2, r2, #4
 80025c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	2208      	movs	r2, #8
 80025ca:	409a      	lsls	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f043 0201 	orr.w	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2201      	movs	r2, #1
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	2201      	movs	r2, #1
 8002600:	409a      	lsls	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f043 0202 	orr.w	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2204      	movs	r2, #4
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d012      	beq.n	8002648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2204      	movs	r2, #4
 8002636:	409a      	lsls	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0204 	orr.w	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2210      	movs	r2, #16
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d043      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d03c      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2210      	movs	r2, #16
 800266c:	409a      	lsls	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d018      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d024      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
 800269e:	e01f      	b.n	80026e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	e016      	b.n	80026e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0208 	bic.w	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2220      	movs	r2, #32
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 808f 	beq.w	8002810 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8087 	beq.w	8002810 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	2220      	movs	r2, #32
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b05      	cmp	r3, #5
 8002718:	d136      	bne.n	8002788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0216 	bic.w	r2, r2, #22
 8002728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_DMA_IRQHandler+0x1da>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0208 	bic.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	223f      	movs	r2, #63	; 0x3f
 8002760:	409a      	lsls	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07e      	beq.n	800287c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
        }
        return;
 8002786:	e079      	b.n	800287c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01d      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10d      	bne.n	80027c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d031      	beq.n	8002810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
 80027b4:	e02c      	b.n	8002810 <HAL_DMA_IRQHandler+0x2a0>
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000
 80027bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d023      	beq.n	8002810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
 80027d0:	e01e      	b.n	8002810 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10f      	bne.n	8002800 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0210 	bic.w	r2, r2, #16
 80027ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	2b00      	cmp	r3, #0
 8002816:	d032      	beq.n	800287e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d022      	beq.n	800286a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2205      	movs	r2, #5
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3301      	adds	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	d307      	bcc.n	8002858 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f2      	bne.n	800283c <HAL_DMA_IRQHandler+0x2cc>
 8002856:	e000      	b.n	800285a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002858:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
 800287a:	e000      	b.n	800287e <HAL_DMA_IRQHandler+0x30e>
        return;
 800287c:	bf00      	nop
    }
  }
}
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d108      	bne.n	80028c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028c2:	e007      	b.n	80028d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	60da      	str	r2, [r3, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3b10      	subs	r3, #16
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <DMA_CalcBaseAndBitshift+0x64>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <DMA_CalcBaseAndBitshift+0x68>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d909      	bls.n	8002922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	1d1a      	adds	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	659a      	str	r2, [r3, #88]	; 0x58
 8002920:	e007      	b.n	8002932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	aaaaaaab 	.word	0xaaaaaaab
 8002948:	08005880 	.word	0x08005880

0800294c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11f      	bne.n	80029a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d856      	bhi.n	8002a1a <DMA_CheckFifoParam+0xce>
 800296c:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <DMA_CheckFifoParam+0x28>)
 800296e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002972:	bf00      	nop
 8002974:	08002985 	.word	0x08002985
 8002978:	08002997 	.word	0x08002997
 800297c:	08002985 	.word	0x08002985
 8002980:	08002a1b 	.word	0x08002a1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d046      	beq.n	8002a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e043      	b.n	8002a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800299e:	d140      	bne.n	8002a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a4:	e03d      	b.n	8002a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d121      	bne.n	80029f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d837      	bhi.n	8002a26 <DMA_CheckFifoParam+0xda>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <DMA_CheckFifoParam+0x70>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029d3 	.word	0x080029d3
 80029c4:	080029cd 	.word	0x080029cd
 80029c8:	080029e5 	.word	0x080029e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e030      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d025      	beq.n	8002a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e2:	e022      	b.n	8002a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ec:	d11f      	bne.n	8002a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029f2:	e01c      	b.n	8002a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d903      	bls.n	8002a02 <DMA_CheckFifoParam+0xb6>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d003      	beq.n	8002a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a00:	e018      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      break;
 8002a06:	e015      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      break;
 8002a18:	e00b      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e00a      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e008      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
 8002a24:	e006      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e004      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
    }
  } 
  
  return status; 
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e16b      	b.n	8002d38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 815a 	bne.w	8002d32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d005      	beq.n	8002a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d130      	bne.n	8002af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0201 	and.w	r2, r3, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d017      	beq.n	8002b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d123      	bne.n	8002b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80b4 	beq.w	8002d32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b60      	ldr	r3, [pc, #384]	; (8002d50 <HAL_GPIO_Init+0x30c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a5f      	ldr	r2, [pc, #380]	; (8002d50 <HAL_GPIO_Init+0x30c>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <HAL_GPIO_Init+0x30c>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be6:	4a5b      	ldr	r2, [pc, #364]	; (8002d54 <HAL_GPIO_Init+0x310>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_GPIO_Init+0x314>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02b      	beq.n	8002c6a <HAL_GPIO_Init+0x226>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a51      	ldr	r2, [pc, #324]	; (8002d5c <HAL_GPIO_Init+0x318>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d025      	beq.n	8002c66 <HAL_GPIO_Init+0x222>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_GPIO_Init+0x31c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x21e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4f      	ldr	r2, [pc, #316]	; (8002d64 <HAL_GPIO_Init+0x320>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x21a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4e      	ldr	r2, [pc, #312]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x216>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <HAL_GPIO_Init+0x328>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x212>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4c      	ldr	r2, [pc, #304]	; (8002d70 <HAL_GPIO_Init+0x32c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x20e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4b      	ldr	r2, [pc, #300]	; (8002d74 <HAL_GPIO_Init+0x330>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x20a>
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	e00e      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c4e:	2308      	movs	r3, #8
 8002c50:	e00c      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c52:	2306      	movs	r3, #6
 8002c54:	e00a      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c56:	2305      	movs	r3, #5
 8002c58:	e008      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	e006      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e004      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e002      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f002 0203 	and.w	r2, r2, #3
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	4093      	lsls	r3, r2
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c7c:	4935      	ldr	r1, [pc, #212]	; (8002d54 <HAL_GPIO_Init+0x310>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cae:	4a32      	ldr	r2, [pc, #200]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3301      	adds	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b0f      	cmp	r3, #15
 8002d3c:	f67f ae90 	bls.w	8002a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40013800 	.word	0x40013800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40020c00 	.word	0x40020c00
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40021400 	.word	0x40021400
 8002d70:	40021800 	.word	0x40021800
 8002d74:	40021c00 	.word	0x40021c00
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d8c:	787b      	ldrb	r3, [r7, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d98:	e003      	b.n	8002da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d9a:	887b      	ldrh	r3, [r7, #2]
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e267      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d075      	beq.n	8002eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dce:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b85      	ldr	r3, [pc, #532]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d112      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df2:	d10b      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x108>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d157      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e242      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x74>
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a75      	ldr	r2, [pc, #468]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x98>
 8002e2e:	4b70      	ldr	r3, [pc, #448]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6f      	ldr	r2, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6c      	ldr	r2, [pc, #432]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e48:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a68      	ldr	r2, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fc96 	bl	8001798 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fc92 	bl	8001798 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e207      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc0>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fc82 	bl	8001798 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fc7e 	bl	8001798 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1f3      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0xe8>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d11c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d116      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1c7      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4937      	ldr	r1, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	e03a      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f20:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_OscConfig+0x244>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe fc37 	bl	8001798 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fc33 	bl	8001798 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1a8      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4925      	ldr	r1, [pc, #148]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x244>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fc16 	bl	8001798 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe fc12 	bl	8001798 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e187      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d036      	beq.n	8003008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_RCC_OscConfig+0x248>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fbf6 	bl	8001798 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fbf2 	bl	8001798 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e167      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x200>
 8002fce:	e01b      	b.n	8003008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x248>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fbdf 	bl	8001798 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	e00e      	b.n	8002ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fde:	f7fe fbdb 	bl	8001798 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d907      	bls.n	8002ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e150      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	42470000 	.word	0x42470000
 8002ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8097 	beq.w	8003144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301a:	4b81      	ldr	r3, [pc, #516]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	4b7d      	ldr	r3, [pc, #500]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a7c      	ldr	r2, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003052:	4b74      	ldr	r3, [pc, #464]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a73      	ldr	r2, [pc, #460]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fe fb9b 	bl	8001798 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fe fb97 	bl	8001798 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e10c      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x2ea>
 800308c:	4b64      	ldr	r3, [pc, #400]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e01c      	b.n	80030d4 <HAL_RCC_OscConfig+0x324>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x30c>
 80030a2:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a5b      	ldr	r2, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0x324>
 80030bc:	4b58      	ldr	r3, [pc, #352]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a57      	ldr	r2, [pc, #348]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030ce:	f023 0304 	bic.w	r3, r3, #4
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fb5c 	bl	8001798 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fb58 	bl	8001798 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0cb      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ee      	beq.n	80030e4 <HAL_RCC_OscConfig+0x334>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fe fb46 	bl	8001798 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310e:	e00a      	b.n	8003126 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fe fb42 	bl	8001798 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0b5      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ee      	bne.n	8003110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	4a38      	ldr	r2, [pc, #224]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a1 	beq.w	8003290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b08      	cmp	r3, #8
 8003158:	d05c      	beq.n	8003214 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d141      	bne.n	80031e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fb16 	bl	8001798 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fb12 	bl	8001798 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e087      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	491b      	ldr	r1, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe faeb 	bl	8001798 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe fae7 	bl	8001798 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e05c      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x416>
 80031e4:	e054      	b.n	8003290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fad4 	bl	8001798 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fad0 	bl	8001798 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e045      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x444>
 8003212:	e03d      	b.n	8003290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e038      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
 8003220:	40023800 	.word	0x40023800
 8003224:	40007000 	.word	0x40007000
 8003228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4ec>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d028      	beq.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d121      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11a      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003264:	4293      	cmp	r3, r2
 8003266:	d111      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d107      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0cc      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d90c      	bls.n	80032dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0b8      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	494d      	ldr	r1, [pc, #308]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d044      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d119      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335a:	2b03      	cmp	r3, #3
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e067      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337e:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4934      	ldr	r1, [pc, #208]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003390:	f7fe fa02 	bl	8001798 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	e00a      	b.n	80033ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003398:	f7fe f9fe 	bl	8001798 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e04f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 020c 	and.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	429a      	cmp	r2, r3
 80033be:	d1eb      	bne.n	8003398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d20c      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e032      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4916      	ldr	r1, [pc, #88]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	490e      	ldr	r1, [pc, #56]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003426:	f000 f821 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800342a:	4602      	mov	r2, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	490a      	ldr	r1, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	5ccb      	ldrb	r3, [r1, r3]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe f962 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023c00 	.word	0x40023c00
 800345c:	40023800 	.word	0x40023800
 8003460:	08005868 	.word	0x08005868
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003470:	b090      	sub	sp, #64	; 0x40
 8003472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
 8003478:	2300      	movs	r3, #0
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347c:	2300      	movs	r3, #0
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003484:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d00d      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x40>
 8003490:	2b08      	cmp	r3, #8
 8003492:	f200 80a1 	bhi.w	80035d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x34>
 800349a:	2b04      	cmp	r3, #4
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800349e:	e09b      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034a4:	e09b      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a6:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034aa:	e098      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ac:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <HAL_RCC_GetSysClockFreq+0x180>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b6:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <HAL_RCC_GetSysClockFreq+0x180>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d028      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_RCC_GetSysClockFreq+0x180>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	2200      	movs	r2, #0
 80034ca:	623b      	str	r3, [r7, #32]
 80034cc:	627a      	str	r2, [r7, #36]	; 0x24
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034d4:	2100      	movs	r1, #0
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034d8:	fb03 f201 	mul.w	r2, r3, r1
 80034dc:	2300      	movs	r3, #0
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	4a43      	ldr	r2, [pc, #268]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034e6:	fba0 1202 	umull	r1, r2, r0, r2
 80034ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ec:	460a      	mov	r2, r1
 80034ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80034f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f2:	4413      	add	r3, r2
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	2200      	movs	r2, #0
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	61fa      	str	r2, [r7, #28]
 80034fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003502:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003506:	f7fc fe5f 	bl	80001c8 <__aeabi_uldivmod>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4613      	mov	r3, r2
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003512:	e053      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003514:	4b35      	ldr	r3, [pc, #212]	; (80035ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	2200      	movs	r2, #0
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	617a      	str	r2, [r7, #20]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003526:	f04f 0b00 	mov.w	fp, #0
 800352a:	4652      	mov	r2, sl
 800352c:	465b      	mov	r3, fp
 800352e:	f04f 0000 	mov.w	r0, #0
 8003532:	f04f 0100 	mov.w	r1, #0
 8003536:	0159      	lsls	r1, r3, #5
 8003538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800353c:	0150      	lsls	r0, r2, #5
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	ebb2 080a 	subs.w	r8, r2, sl
 8003546:	eb63 090b 	sbc.w	r9, r3, fp
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003556:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800355a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800355e:	ebb2 0408 	subs.w	r4, r2, r8
 8003562:	eb63 0509 	sbc.w	r5, r3, r9
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	00eb      	lsls	r3, r5, #3
 8003570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003574:	00e2      	lsls	r2, r4, #3
 8003576:	4614      	mov	r4, r2
 8003578:	461d      	mov	r5, r3
 800357a:	eb14 030a 	adds.w	r3, r4, sl
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	eb45 030b 	adc.w	r3, r5, fp
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003592:	4629      	mov	r1, r5
 8003594:	028b      	lsls	r3, r1, #10
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800359c:	4621      	mov	r1, r4
 800359e:	028a      	lsls	r2, r1, #10
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	2200      	movs	r2, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	60fa      	str	r2, [r7, #12]
 80035ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b0:	f7fc fe0a 	bl	80001c8 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_GetSysClockFreq+0x180>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80035cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035d6:	e002      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80035da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3740      	adds	r7, #64	; 0x40
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	017d7840 	.word	0x017d7840

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000000 	.word	0x20000000

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a9b      	lsrs	r3, r3, #10
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08005878 	.word	0x08005878

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffdc 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0b5b      	lsrs	r3, r3, #13
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08005878 	.word	0x08005878

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e041      	b.n	80036f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fe66 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 fc08 	bl	8003eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e041      	b.n	8003794 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f839 	bl	800379c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fbb9 	bl	8003eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_TIM_PWM_Start+0x24>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e022      	b.n	800381a <HAL_TIM_PWM_Start+0x6a>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d109      	bne.n	80037ee <HAL_TIM_PWM_Start+0x3e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e015      	b.n	800381a <HAL_TIM_PWM_Start+0x6a>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d109      	bne.n	8003808 <HAL_TIM_PWM_Start+0x58>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e008      	b.n	800381a <HAL_TIM_PWM_Start+0x6a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07c      	b.n	800391c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <HAL_TIM_PWM_Start+0x82>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003830:	e013      	b.n	800385a <HAL_TIM_PWM_Start+0xaa>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_Start+0x92>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003840:	e00b      	b.n	800385a <HAL_TIM_PWM_Start+0xaa>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Start+0xa2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003850:	e003      	b.n	800385a <HAL_TIM_PWM_Start+0xaa>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fe10 	bl	8004488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <HAL_TIM_PWM_Start+0x174>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_TIM_PWM_Start+0xcc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <HAL_TIM_PWM_Start+0x178>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_TIM_PWM_Start+0xd0>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_TIM_PWM_Start+0xd2>
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a22      	ldr	r2, [pc, #136]	; (8003924 <HAL_TIM_PWM_Start+0x174>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d022      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d01d      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <HAL_TIM_PWM_Start+0x17c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_TIM_PWM_Start+0x180>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <HAL_TIM_PWM_Start+0x184>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIM_PWM_Start+0x178>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_TIM_PWM_Start+0x188>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_TIM_PWM_Start+0x18c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d111      	bne.n	800390a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b06      	cmp	r3, #6
 80038f6:	d010      	beq.n	800391a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003908:	e007      	b.n	800391a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40010000 	.word	0x40010000
 8003928:	40010400 	.word	0x40010400
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40014000 	.word	0x40014000
 800393c:	40001800 	.word	0x40001800

08003940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d122      	bne.n	800399c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d11b      	bne.n	800399c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0202 	mvn.w	r2, #2
 800396c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa77 	bl	8003e76 <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa69 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fa7a 	bl	8003e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d122      	bne.n	80039f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d11b      	bne.n	80039f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0204 	mvn.w	r2, #4
 80039c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa4d 	bl	8003e76 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa3f 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fa50 	bl	8003e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d122      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0208 	mvn.w	r2, #8
 8003a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa23 	bl	8003e76 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa15 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fa26 	bl	8003e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0210 	mvn.w	r2, #16
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9f9 	bl	8003e76 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9eb 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9fc 	bl	8003e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0201 	mvn.w	r2, #1
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc fd04 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b80      	cmp	r3, #128	; 0x80
 8003ad0:	d10e      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fd78 	bl	80045e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9c1 	bl	8003e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0220 	mvn.w	r2, #32
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fd42 	bl	80045cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0ae      	b.n	8003ccc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	f200 809f 	bhi.w	8003cbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003cbd 	.word	0x08003cbd
 8003b8c:	08003cbd 	.word	0x08003cbd
 8003b90:	08003cbd 	.word	0x08003cbd
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003cbd 	.word	0x08003cbd
 8003b9c:	08003cbd 	.word	0x08003cbd
 8003ba0:	08003cbd 	.word	0x08003cbd
 8003ba4:	08003c3b 	.word	0x08003c3b
 8003ba8:	08003cbd 	.word	0x08003cbd
 8003bac:	08003cbd 	.word	0x08003cbd
 8003bb0:	08003cbd 	.word	0x08003cbd
 8003bb4:	08003c7b 	.word	0x08003c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fa18 	bl	8003ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0208 	orr.w	r2, r2, #8
 8003bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0204 	bic.w	r2, r2, #4
 8003be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6999      	ldr	r1, [r3, #24]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	619a      	str	r2, [r3, #24]
      break;
 8003bf6:	e064      	b.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fa68 	bl	80040d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6999      	ldr	r1, [r3, #24]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	021a      	lsls	r2, r3, #8
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	619a      	str	r2, [r3, #24]
      break;
 8003c38:	e043      	b.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fabd 	bl	80041c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0208 	orr.w	r2, r2, #8
 8003c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0204 	bic.w	r2, r2, #4
 8003c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69d9      	ldr	r1, [r3, #28]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	61da      	str	r2, [r3, #28]
      break;
 8003c78:	e023      	b.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fb11 	bl	80042a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	021a      	lsls	r2, r3, #8
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	61da      	str	r2, [r3, #28]
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e0b4      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x186>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d28:	d03e      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2e:	f200 8087 	bhi.w	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	f000 8086 	beq.w	8003e46 <HAL_TIM_ConfigClockSource+0x172>
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	d87f      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b70      	cmp	r3, #112	; 0x70
 8003d42:	d01a      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xa6>
 8003d44:	2b70      	cmp	r3, #112	; 0x70
 8003d46:	d87b      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d48:	2b60      	cmp	r3, #96	; 0x60
 8003d4a:	d050      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x11a>
 8003d4c:	2b60      	cmp	r3, #96	; 0x60
 8003d4e:	d877      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b50      	cmp	r3, #80	; 0x50
 8003d52:	d03c      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xfa>
 8003d54:	2b50      	cmp	r3, #80	; 0x50
 8003d56:	d873      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d058      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x13a>
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d86f      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b30      	cmp	r3, #48	; 0x30
 8003d62:	d064      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d64:	2b30      	cmp	r3, #48	; 0x30
 8003d66:	d86b      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d060      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d867      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05c      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d05a      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d78:	e062      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f000 fb5d 	bl	8004448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	609a      	str	r2, [r3, #8]
      break;
 8003da6:	e04f      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6899      	ldr	r1, [r3, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f000 fb46 	bl	8004448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dca:	609a      	str	r2, [r3, #8]
      break;
 8003dcc:	e03c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 faba 	bl	8004354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2150      	movs	r1, #80	; 0x50
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb13 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e02c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f000 fad9 	bl	80043b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2160      	movs	r1, #96	; 0x60
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fb03 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e01c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f000 fa9a 	bl	8004354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 faf3 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 faea 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a40      	ldr	r2, [pc, #256]	; (8003fc8 <TIM_Base_SetConfig+0x114>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed2:	d00f      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3d      	ldr	r2, [pc, #244]	; (8003fcc <TIM_Base_SetConfig+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3c      	ldr	r2, [pc, #240]	; (8003fd0 <TIM_Base_SetConfig+0x11c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d007      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3b      	ldr	r2, [pc, #236]	; (8003fd4 <TIM_Base_SetConfig+0x120>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <TIM_Base_SetConfig+0x124>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d108      	bne.n	8003f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2f      	ldr	r2, [pc, #188]	; (8003fc8 <TIM_Base_SetConfig+0x114>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02b      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d027      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <TIM_Base_SetConfig+0x118>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d023      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <TIM_Base_SetConfig+0x11c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <TIM_Base_SetConfig+0x120>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01b      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <TIM_Base_SetConfig+0x124>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d017      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a28      	ldr	r2, [pc, #160]	; (8003fdc <TIM_Base_SetConfig+0x128>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <TIM_Base_SetConfig+0x12c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <TIM_Base_SetConfig+0x130>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a25      	ldr	r2, [pc, #148]	; (8003fe8 <TIM_Base_SetConfig+0x134>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a24      	ldr	r2, [pc, #144]	; (8003fec <TIM_Base_SetConfig+0x138>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a23      	ldr	r2, [pc, #140]	; (8003ff0 <TIM_Base_SetConfig+0x13c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <TIM_Base_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_Base_SetConfig+0xf8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d103      	bne.n	8003fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	615a      	str	r2, [r3, #20]
}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800
 8003fe8:	40001800 	.word	0x40001800
 8003fec:	40001c00 	.word	0x40001c00
 8003ff0:	40002000 	.word	0x40002000

08003ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0302 	bic.w	r3, r3, #2
 800403c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a20      	ldr	r2, [pc, #128]	; (80040cc <TIM_OC1_SetConfig+0xd8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_OC1_SetConfig+0x64>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <TIM_OC1_SetConfig+0xdc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10c      	bne.n	8004072 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0308 	bic.w	r3, r3, #8
 800405e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 0304 	bic.w	r3, r3, #4
 8004070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <TIM_OC1_SetConfig+0xd8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_OC1_SetConfig+0x8e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <TIM_OC1_SetConfig+0xdc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d111      	bne.n	80040a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010400 	.word	0x40010400

080040d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0320 	bic.w	r3, r3, #32
 800411e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <TIM_OC2_SetConfig+0xe4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_OC2_SetConfig+0x68>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a21      	ldr	r2, [pc, #132]	; (80041bc <TIM_OC2_SetConfig+0xe8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d10d      	bne.n	8004158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <TIM_OC2_SetConfig+0xe4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_OC2_SetConfig+0x94>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a16      	ldr	r2, [pc, #88]	; (80041bc <TIM_OC2_SetConfig+0xe8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d113      	bne.n	8004190 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <TIM_OC3_SetConfig+0xe0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d003      	beq.n	8004226 <TIM_OC3_SetConfig+0x66>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <TIM_OC3_SetConfig+0xe4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10d      	bne.n	8004242 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <TIM_OC3_SetConfig+0xe0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_OC3_SetConfig+0x92>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <TIM_OC3_SetConfig+0xe4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d113      	bne.n	800427a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	621a      	str	r2, [r3, #32]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40010400 	.word	0x40010400

080042a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	031b      	lsls	r3, r3, #12
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <TIM_OC4_SetConfig+0xa4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_OC4_SetConfig+0x68>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a11      	ldr	r2, [pc, #68]	; (8004350 <TIM_OC4_SetConfig+0xa8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d109      	bne.n	8004324 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40010400 	.word	0x40010400

08004354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f023 0201 	bic.w	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800437e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f023 030a 	bic.w	r3, r3, #10
 8004390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b087      	sub	sp, #28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0210 	bic.w	r2, r3, #16
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	031b      	lsls	r3, r3, #12
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	f043 0307 	orr.w	r3, r3, #7
 8004434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	021a      	lsls	r2, r3, #8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	431a      	orrs	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	609a      	str	r2, [r3, #8]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2201      	movs	r2, #1
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1a      	ldr	r2, [r3, #32]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	fa01 f303 	lsl.w	r3, r1, r3
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e05a      	b.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d01d      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d10c      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40010400 	.word	0x40010400
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40001800 	.word	0x40001800

080045cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e03f      	b.n	8004686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc ff14 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fe69 	bl	8005310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800464c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800465c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800466c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d11d      	bne.n	80046e4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_UART_Receive_DMA+0x26>
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e016      	b.n	80046e6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Receive_DMA+0x38>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e00f      	b.n	80046e6 <HAL_UART_Receive_DMA+0x58>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fbb8 	bl	8004e50 <UART_Start_Receive_DMA>
 80046e0:	4603      	mov	r3, r0
 80046e2:	e000      	b.n	80046e6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b0ba      	sub	sp, #232	; 0xe8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800472e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_UART_IRQHandler+0x66>
 8004742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fd23 	bl	800519a <UART_Receive_IT>
      return;
 8004754:	e256      	b.n	8004c04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80de 	beq.w	800491c <HAL_UART_IRQHandler+0x22c>
 8004760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004770:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80d1 	beq.w	800491c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_UART_IRQHandler+0xae>
 8004786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_UART_IRQHandler+0xd2>
 80047aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_UART_IRQHandler+0xf6>
 80047ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_UART_IRQHandler+0x126>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d105      	bne.n	800480a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0208 	orr.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 81ed 	beq.w	8004bfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_UART_IRQHandler+0x14e>
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fcae 	bl	800519a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_UART_IRQHandler+0x17a>
 8004862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d04f      	beq.n	800490a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fbb6 	bl	8004fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d141      	bne.n	8004902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3314      	adds	r3, #20
 8004884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3314      	adds	r3, #20
 80048a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1d9      	bne.n	800487e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d013      	beq.n	80048fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	4a7d      	ldr	r2, [pc, #500]	; (8004acc <HAL_UART_IRQHandler+0x3dc>)
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fd fe24 	bl	800252c <HAL_DMA_Abort_IT>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f4:	4610      	mov	r0, r2
 80048f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	e00e      	b.n	8004918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f99a 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e00a      	b.n	8004918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f996 	bl	8004c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e006      	b.n	8004918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f992 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004916:	e170      	b.n	8004bfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	bf00      	nop
    return;
 800491a:	e16e      	b.n	8004bfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	2b01      	cmp	r3, #1
 8004922:	f040 814a 	bne.w	8004bba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8143 	beq.w	8004bba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 813c 	beq.w	8004bba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	f040 80b4 	bne.w	8004ad0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8140 	beq.w	8004bfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004986:	429a      	cmp	r2, r3
 8004988:	f080 8139 	bcs.w	8004bfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004992:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499e:	f000 8088 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	330c      	adds	r3, #12
 80049ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1d9      	bne.n	80049a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e1      	bne.n	80049ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e3      	bne.n	8004a2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a82:	f023 0310 	bic.w	r3, r3, #16
 8004a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a94:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e3      	bne.n	8004a70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fd fccd 	bl	800244c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8c0 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ac8:	e099      	b.n	8004bfe <HAL_UART_IRQHandler+0x50e>
 8004aca:	bf00      	nop
 8004acc:	080050a3 	.word	0x080050a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 808b 	beq.w	8004c02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8086 	beq.w	8004c02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b1a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e3      	bne.n	8004af6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b52:	633a      	str	r2, [r7, #48]	; 0x30
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0310 	bic.w	r3, r3, #16
 8004b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	69b9      	ldr	r1, [r7, #24]
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e3      	bne.n	8004b74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f848 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bb8:	e023      	b.n	8004c02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_UART_IRQHandler+0x4ea>
 8004bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa79 	bl	80050ca <UART_Transmit_IT>
    return;
 8004bd8:	e014      	b.n	8004c04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00e      	beq.n	8004c04 <HAL_UART_IRQHandler+0x514>
 8004be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fab9 	bl	800516a <UART_EndTransmit_IT>
    return;
 8004bf8:	e004      	b.n	8004c04 <HAL_UART_IRQHandler+0x514>
    return;
 8004bfa:	bf00      	nop
 8004bfc:	e002      	b.n	8004c04 <HAL_UART_IRQHandler+0x514>
      return;
 8004bfe:	bf00      	nop
 8004c00:	e000      	b.n	8004c04 <HAL_UART_IRQHandler+0x514>
      return;
 8004c02:	bf00      	nop
  }
}
 8004c04:	37e8      	adds	r7, #232	; 0xe8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop

08004c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b09c      	sub	sp, #112	; 0x70
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d172      	bne.n	8004d62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7e:	2200      	movs	r2, #0
 8004c80:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c98:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ca2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ca4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e5      	bne.n	8004c82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3314      	adds	r3, #20
 8004cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cd6:	647a      	str	r2, [r7, #68]	; 0x44
 8004cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e5      	bne.n	8004cb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3314      	adds	r3, #20
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d00:	663b      	str	r3, [r7, #96]	; 0x60
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e5      	bne.n	8004cea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d119      	bne.n	8004d62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d4e:	61fa      	str	r2, [r7, #28]
 8004d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d106      	bne.n	8004d78 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d72:	f7ff ff69 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d76:	e002      	b.n	8004d7e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004d78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d7a:	f7fb fbb1 	bl	80004e0 <HAL_UART_RxCpltCallback>
}
 8004d7e:	bf00      	nop
 8004d80:	3770      	adds	r7, #112	; 0x70
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d108      	bne.n	8004dae <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	4619      	mov	r1, r3
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff ff4e 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dac:	e002      	b.n	8004db4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ff36 	bl	8004c20 <HAL_UART_RxHalfCpltCallback>
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b21      	cmp	r3, #33	; 0x21
 8004dee:	d108      	bne.n	8004e02 <UART_DMAError+0x46>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004dfc:	68b8      	ldr	r0, [r7, #8]
 8004dfe:	f000 f8c5 	bl	8004f8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b22      	cmp	r3, #34	; 0x22
 8004e22:	d108      	bne.n	8004e36 <UART_DMAError+0x7a>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e30:	68b8      	ldr	r0, [r7, #8]
 8004e32:	f000 f8d3 	bl	8004fdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f043 0210 	orr.w	r2, r3, #16
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e42:	68b8      	ldr	r0, [r7, #8]
 8004e44:	f7ff fef6 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b098      	sub	sp, #96	; 0x60
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2222      	movs	r2, #34	; 0x22
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	4a40      	ldr	r2, [pc, #256]	; (8004f80 <UART_Start_Receive_DMA+0x130>)
 8004e7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	4a3f      	ldr	r2, [pc, #252]	; (8004f84 <UART_Start_Receive_DMA+0x134>)
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	4a3e      	ldr	r2, [pc, #248]	; (8004f88 <UART_Start_Receive_DMA+0x138>)
 8004e8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	2200      	movs	r2, #0
 8004e96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e98:	f107 0308 	add.w	r3, r7, #8
 8004e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	f7fd fa74 	bl	800239c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d019      	beq.n	8004f0e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004efa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004efc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	657b      	str	r3, [r7, #84]	; 0x54
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3314      	adds	r3, #20
 8004f48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	617b      	str	r3, [r7, #20]
   return(result);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f58:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3314      	adds	r3, #20
 8004f60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f62:	627a      	str	r2, [r7, #36]	; 0x24
 8004f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6a39      	ldr	r1, [r7, #32]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e5      	bne.n	8004f42 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3760      	adds	r7, #96	; 0x60
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	08004c61 	.word	0x08004c61
 8004f84:	08004d87 	.word	0x08004d87
 8004f88:	08004dbd 	.word	0x08004dbd

08004f8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	61ba      	str	r2, [r7, #24]
 8004fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004fd0:	bf00      	nop
 8004fd2:	3724      	adds	r7, #36	; 0x24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b095      	sub	sp, #84	; 0x54
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005004:	643a      	str	r2, [r7, #64]	; 0x40
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800500a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e5      	bne.n	8004fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	61fb      	str	r3, [r7, #28]
   return(result);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3314      	adds	r3, #20
 8005036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800503e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	2b01      	cmp	r3, #1
 8005052:	d119      	bne.n	8005088 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	60bb      	str	r3, [r7, #8]
   return(result);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f023 0310 	bic.w	r3, r3, #16
 800506a:	647b      	str	r3, [r7, #68]	; 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005074:	61ba      	str	r2, [r7, #24]
 8005076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	613b      	str	r3, [r7, #16]
   return(result);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005096:	bf00      	nop
 8005098:	3754      	adds	r7, #84	; 0x54
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fdb9 	bl	8004c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b21      	cmp	r3, #33	; 0x21
 80050dc:	d13e      	bne.n	800515c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d114      	bne.n	8005112 <UART_Transmit_IT+0x48>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d110      	bne.n	8005112 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005104:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	1c9a      	adds	r2, r3, #2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	621a      	str	r2, [r3, #32]
 8005110:	e008      	b.n	8005124 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6211      	str	r1, [r2, #32]
 800511c:	781a      	ldrb	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4619      	mov	r1, r3
 8005132:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005146:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005156:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005180:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fd3e 	bl	8004c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b08c      	sub	sp, #48	; 0x30
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b22      	cmp	r3, #34	; 0x22
 80051ac:	f040 80ab 	bne.w	8005306 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b8:	d117      	bne.n	80051ea <UART_Receive_IT+0x50>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
 80051e8:	e026      	b.n	8005238 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fc:	d007      	beq.n	800520e <UART_Receive_IT+0x74>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <UART_Receive_IT+0x82>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e008      	b.n	800522e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005228:	b2da      	uxtb	r2, r3
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4619      	mov	r1, r3
 8005246:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005248:	2b00      	cmp	r3, #0
 800524a:	d15a      	bne.n	8005302 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0220 	bic.w	r2, r2, #32
 800525a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800526a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b01      	cmp	r3, #1
 800528a:	d135      	bne.n	80052f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f023 0310 	bic.w	r3, r3, #16
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	623a      	str	r2, [r7, #32]
 80052b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d10a      	bne.n	80052ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fca9 	bl	8004c48 <HAL_UARTEx_RxEventCallback>
 80052f6:	e002      	b.n	80052fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fb f8f1 	bl	80004e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e002      	b.n	8005308 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005306:	2302      	movs	r3, #2
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	3730      	adds	r7, #48	; 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005314:	b0c0      	sub	sp, #256	; 0x100
 8005316:	af00      	add	r7, sp, #0
 8005318:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	68d9      	ldr	r1, [r3, #12]
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	ea40 0301 	orr.w	r3, r0, r1
 8005338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	431a      	orrs	r2, r3
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	431a      	orrs	r2, r3
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005368:	f021 010c 	bic.w	r1, r1, #12
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005376:	430b      	orrs	r3, r1
 8005378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	6999      	ldr	r1, [r3, #24]
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	ea40 0301 	orr.w	r3, r0, r1
 8005396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b8f      	ldr	r3, [pc, #572]	; (80055dc <UART_SetConfig+0x2cc>)
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d005      	beq.n	80053b0 <UART_SetConfig+0xa0>
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b8d      	ldr	r3, [pc, #564]	; (80055e0 <UART_SetConfig+0x2d0>)
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d104      	bne.n	80053ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b0:	f7fe f942 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 80053b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053b8:	e003      	b.n	80053c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ba:	f7fe f929 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80053be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053cc:	f040 810c 	bne.w	80055e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053e2:	4622      	mov	r2, r4
 80053e4:	462b      	mov	r3, r5
 80053e6:	1891      	adds	r1, r2, r2
 80053e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80053ea:	415b      	adcs	r3, r3
 80053ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053f2:	4621      	mov	r1, r4
 80053f4:	eb12 0801 	adds.w	r8, r2, r1
 80053f8:	4629      	mov	r1, r5
 80053fa:	eb43 0901 	adc.w	r9, r3, r1
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800540a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800540e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005412:	4690      	mov	r8, r2
 8005414:	4699      	mov	r9, r3
 8005416:	4623      	mov	r3, r4
 8005418:	eb18 0303 	adds.w	r3, r8, r3
 800541c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005420:	462b      	mov	r3, r5
 8005422:	eb49 0303 	adc.w	r3, r9, r3
 8005426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005436:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800543a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800543e:	460b      	mov	r3, r1
 8005440:	18db      	adds	r3, r3, r3
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
 8005444:	4613      	mov	r3, r2
 8005446:	eb42 0303 	adc.w	r3, r2, r3
 800544a:	657b      	str	r3, [r7, #84]	; 0x54
 800544c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005454:	f7fa feb8 	bl	80001c8 <__aeabi_uldivmod>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4b61      	ldr	r3, [pc, #388]	; (80055e4 <UART_SetConfig+0x2d4>)
 800545e:	fba3 2302 	umull	r2, r3, r3, r2
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	011c      	lsls	r4, r3, #4
 8005466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546a:	2200      	movs	r2, #0
 800546c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005470:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005478:	4642      	mov	r2, r8
 800547a:	464b      	mov	r3, r9
 800547c:	1891      	adds	r1, r2, r2
 800547e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005480:	415b      	adcs	r3, r3
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005488:	4641      	mov	r1, r8
 800548a:	eb12 0a01 	adds.w	sl, r2, r1
 800548e:	4649      	mov	r1, r9
 8005490:	eb43 0b01 	adc.w	fp, r3, r1
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a8:	4692      	mov	sl, r2
 80054aa:	469b      	mov	fp, r3
 80054ac:	4643      	mov	r3, r8
 80054ae:	eb1a 0303 	adds.w	r3, sl, r3
 80054b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054b6:	464b      	mov	r3, r9
 80054b8:	eb4b 0303 	adc.w	r3, fp, r3
 80054bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054d4:	460b      	mov	r3, r1
 80054d6:	18db      	adds	r3, r3, r3
 80054d8:	643b      	str	r3, [r7, #64]	; 0x40
 80054da:	4613      	mov	r3, r2
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	647b      	str	r3, [r7, #68]	; 0x44
 80054e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054ea:	f7fa fe6d 	bl	80001c8 <__aeabi_uldivmod>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <UART_SetConfig+0x2d4>)
 80054f6:	fba3 2301 	umull	r2, r3, r3, r1
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2264      	movs	r2, #100	; 0x64
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	1acb      	subs	r3, r1, r3
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <UART_SetConfig+0x2d4>)
 800550c:	fba3 2302 	umull	r2, r3, r3, r2
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005518:	441c      	add	r4, r3
 800551a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551e:	2200      	movs	r2, #0
 8005520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005524:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	1891      	adds	r1, r2, r2
 8005532:	63b9      	str	r1, [r7, #56]	; 0x38
 8005534:	415b      	adcs	r3, r3
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800553c:	4641      	mov	r1, r8
 800553e:	1851      	adds	r1, r2, r1
 8005540:	6339      	str	r1, [r7, #48]	; 0x30
 8005542:	4649      	mov	r1, r9
 8005544:	414b      	adcs	r3, r1
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005554:	4659      	mov	r1, fp
 8005556:	00cb      	lsls	r3, r1, #3
 8005558:	4651      	mov	r1, sl
 800555a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800555e:	4651      	mov	r1, sl
 8005560:	00ca      	lsls	r2, r1, #3
 8005562:	4610      	mov	r0, r2
 8005564:	4619      	mov	r1, r3
 8005566:	4603      	mov	r3, r0
 8005568:	4642      	mov	r2, r8
 800556a:	189b      	adds	r3, r3, r2
 800556c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005570:	464b      	mov	r3, r9
 8005572:	460a      	mov	r2, r1
 8005574:	eb42 0303 	adc.w	r3, r2, r3
 8005578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005588:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800558c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005590:	460b      	mov	r3, r1
 8005592:	18db      	adds	r3, r3, r3
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
 8005596:	4613      	mov	r3, r2
 8005598:	eb42 0303 	adc.w	r3, r2, r3
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055a6:	f7fa fe0f 	bl	80001c8 <__aeabi_uldivmod>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <UART_SetConfig+0x2d4>)
 80055b0:	fba3 1302 	umull	r1, r3, r3, r2
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2164      	movs	r1, #100	; 0x64
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <UART_SetConfig+0x2d4>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 0207 	and.w	r2, r3, #7
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4422      	add	r2, r4
 80055d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055d8:	e105      	b.n	80057e6 <UART_SetConfig+0x4d6>
 80055da:	bf00      	nop
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055fa:	4642      	mov	r2, r8
 80055fc:	464b      	mov	r3, r9
 80055fe:	1891      	adds	r1, r2, r2
 8005600:	6239      	str	r1, [r7, #32]
 8005602:	415b      	adcs	r3, r3
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
 8005606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800560a:	4641      	mov	r1, r8
 800560c:	1854      	adds	r4, r2, r1
 800560e:	4649      	mov	r1, r9
 8005610:	eb43 0501 	adc.w	r5, r3, r1
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	00eb      	lsls	r3, r5, #3
 800561e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005622:	00e2      	lsls	r2, r4, #3
 8005624:	4614      	mov	r4, r2
 8005626:	461d      	mov	r5, r3
 8005628:	4643      	mov	r3, r8
 800562a:	18e3      	adds	r3, r4, r3
 800562c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005630:	464b      	mov	r3, r9
 8005632:	eb45 0303 	adc.w	r3, r5, r3
 8005636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005656:	4629      	mov	r1, r5
 8005658:	008b      	lsls	r3, r1, #2
 800565a:	4621      	mov	r1, r4
 800565c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005660:	4621      	mov	r1, r4
 8005662:	008a      	lsls	r2, r1, #2
 8005664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005668:	f7fa fdae 	bl	80001c8 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4b60      	ldr	r3, [pc, #384]	; (80057f4 <UART_SetConfig+0x4e4>)
 8005672:	fba3 2302 	umull	r2, r3, r3, r2
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	011c      	lsls	r4, r3, #4
 800567a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567e:	2200      	movs	r2, #0
 8005680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	1891      	adds	r1, r2, r2
 8005692:	61b9      	str	r1, [r7, #24]
 8005694:	415b      	adcs	r3, r3
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800569c:	4641      	mov	r1, r8
 800569e:	1851      	adds	r1, r2, r1
 80056a0:	6139      	str	r1, [r7, #16]
 80056a2:	4649      	mov	r1, r9
 80056a4:	414b      	adcs	r3, r1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b4:	4659      	mov	r1, fp
 80056b6:	00cb      	lsls	r3, r1, #3
 80056b8:	4651      	mov	r1, sl
 80056ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056be:	4651      	mov	r1, sl
 80056c0:	00ca      	lsls	r2, r1, #3
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	4642      	mov	r2, r8
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056d0:	464b      	mov	r3, r9
 80056d2:	460a      	mov	r2, r1
 80056d4:	eb42 0303 	adc.w	r3, r2, r3
 80056d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056f4:	4649      	mov	r1, r9
 80056f6:	008b      	lsls	r3, r1, #2
 80056f8:	4641      	mov	r1, r8
 80056fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fe:	4641      	mov	r1, r8
 8005700:	008a      	lsls	r2, r1, #2
 8005702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005706:	f7fa fd5f 	bl	80001c8 <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <UART_SetConfig+0x4e4>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	; 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	3332      	adds	r3, #50	; 0x32
 8005722:	4a34      	ldr	r2, [pc, #208]	; (80057f4 <UART_SetConfig+0x4e4>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800572e:	441c      	add	r4, r3
 8005730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005734:	2200      	movs	r2, #0
 8005736:	673b      	str	r3, [r7, #112]	; 0x70
 8005738:	677a      	str	r2, [r7, #116]	; 0x74
 800573a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800573e:	4642      	mov	r2, r8
 8005740:	464b      	mov	r3, r9
 8005742:	1891      	adds	r1, r2, r2
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	415b      	adcs	r3, r3
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800574e:	4641      	mov	r1, r8
 8005750:	1851      	adds	r1, r2, r1
 8005752:	6039      	str	r1, [r7, #0]
 8005754:	4649      	mov	r1, r9
 8005756:	414b      	adcs	r3, r1
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005766:	4659      	mov	r1, fp
 8005768:	00cb      	lsls	r3, r1, #3
 800576a:	4651      	mov	r1, sl
 800576c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005770:	4651      	mov	r1, sl
 8005772:	00ca      	lsls	r2, r1, #3
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	4603      	mov	r3, r0
 800577a:	4642      	mov	r2, r8
 800577c:	189b      	adds	r3, r3, r2
 800577e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005780:	464b      	mov	r3, r9
 8005782:	460a      	mov	r2, r1
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	66fb      	str	r3, [r7, #108]	; 0x6c
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	663b      	str	r3, [r7, #96]	; 0x60
 8005794:	667a      	str	r2, [r7, #100]	; 0x64
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057a2:	4649      	mov	r1, r9
 80057a4:	008b      	lsls	r3, r1, #2
 80057a6:	4641      	mov	r1, r8
 80057a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ac:	4641      	mov	r1, r8
 80057ae:	008a      	lsls	r2, r1, #2
 80057b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057b4:	f7fa fd08 	bl	80001c8 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <UART_SetConfig+0x4e4>)
 80057be:	fba3 1302 	umull	r1, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	2164      	movs	r1, #100	; 0x64
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	3332      	adds	r3, #50	; 0x32
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <UART_SetConfig+0x4e4>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	f003 020f 	and.w	r2, r3, #15
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4422      	add	r2, r4
 80057e4:	609a      	str	r2, [r3, #8]
}
 80057e6:	bf00      	nop
 80057e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057ec:	46bd      	mov	sp, r7
 80057ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f2:	bf00      	nop
 80057f4:	51eb851f 	.word	0x51eb851f

080057f8 <__libc_init_array>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4d0d      	ldr	r5, [pc, #52]	; (8005830 <__libc_init_array+0x38>)
 80057fc:	4c0d      	ldr	r4, [pc, #52]	; (8005834 <__libc_init_array+0x3c>)
 80057fe:	1b64      	subs	r4, r4, r5
 8005800:	10a4      	asrs	r4, r4, #2
 8005802:	2600      	movs	r6, #0
 8005804:	42a6      	cmp	r6, r4
 8005806:	d109      	bne.n	800581c <__libc_init_array+0x24>
 8005808:	4d0b      	ldr	r5, [pc, #44]	; (8005838 <__libc_init_array+0x40>)
 800580a:	4c0c      	ldr	r4, [pc, #48]	; (800583c <__libc_init_array+0x44>)
 800580c:	f000 f820 	bl	8005850 <_init>
 8005810:	1b64      	subs	r4, r4, r5
 8005812:	10a4      	asrs	r4, r4, #2
 8005814:	2600      	movs	r6, #0
 8005816:	42a6      	cmp	r6, r4
 8005818:	d105      	bne.n	8005826 <__libc_init_array+0x2e>
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005820:	4798      	blx	r3
 8005822:	3601      	adds	r6, #1
 8005824:	e7ee      	b.n	8005804 <__libc_init_array+0xc>
 8005826:	f855 3b04 	ldr.w	r3, [r5], #4
 800582a:	4798      	blx	r3
 800582c:	3601      	adds	r6, #1
 800582e:	e7f2      	b.n	8005816 <__libc_init_array+0x1e>
 8005830:	08005890 	.word	0x08005890
 8005834:	08005890 	.word	0x08005890
 8005838:	08005890 	.word	0x08005890
 800583c:	08005894 	.word	0x08005894

08005840 <memset>:
 8005840:	4402      	add	r2, r0
 8005842:	4603      	mov	r3, r0
 8005844:	4293      	cmp	r3, r2
 8005846:	d100      	bne.n	800584a <memset+0xa>
 8005848:	4770      	bx	lr
 800584a:	f803 1b01 	strb.w	r1, [r3], #1
 800584e:	e7f9      	b.n	8005844 <memset+0x4>

08005850 <_init>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr

0800585c <_fini>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr
